
-- ======================================================================
-- Demo Pack (Production-like): Types + Tables + Sequences + Triggers + Logs
-- + Mock Data + Function (FULL) + Test + Reporting Queries
-- ======================================================================

SET SERVEROUTPUT ON
SET DEFINE OFF
WHENEVER SQLERROR CONTINUE

/* ------------------------------------------------
   0) Clean drop (safe)
------------------------------------------------- */
BEGIN EXECUTE IMMEDIATE 'DROP FUNCTION FNC_GET_MEMBER_INTEREST_TBL'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TYPE SHB.MEMBER_STATUS_SUMMARY_TBL'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TYPE SHB.MEMBER_STATUS_SUMMARY'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE SHB.TBL_CONDITION_DTL_LOG PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE SHB.TBL_CONDITIONS_LOG PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE SHB.TBL_CONDITION_DTL PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE SHB.TBL_CONDITIONS PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE SHB.TBL_EXIT_HISTORY PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE SHB.TBL_ORGAN_PAY_DTL PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE SHB.TBL_MEMBER_PAY_PERIODS PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE SHB.TBL_FISCAL_YEAR PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE MUMS.TBL_MUMS_PERSON PURGE'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE SHB.TBL_MEMBER_PAY_PERIODS_SEQ'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE SHB.TBL_ORGAN_PAY_DTL_SEQ'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE SHB.TBL_CONDITIONS_SEQ'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE SHB.TBL_CONDITION_DTL_SEQ'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE SHB.TBL_CONDITION_DTL_LOG_SEQ'; EXCEPTION WHEN OTHERS THEN NULL; END;
/

/* ------------------------------------------------
   1) Types (function return)
------------------------------------------------- */
CREATE OR REPLACE TYPE SHB.MEMBER_STATUS_SUMMARY AS OBJECT (
  eligibility              NUMBER,
  total_amount             NUMBER,
  member_amount            NUMBER,
  org_amount               NUMBER,
  total_possible_amount    NUMBER,
  total_interest_amount    NUMBER,
  reason                   VARCHAR2(400),
  first_reg_year           NUMBER,
  debug_info               CLOB,
  yearly_interest          CLOB,
  yearly_membership_amount CLOB,
  yearly_org_contribution  CLOB,
  rate                     CLOB,
  exit_date                DATE
);
/
CREATE OR REPLACE TYPE SHB.MEMBER_STATUS_SUMMARY_TBL AS TABLE OF SHB.MEMBER_STATUS_SUMMARY;
/

/* ------------------------------------------------
   2) Security stub (Production-like)
   Overloads to satisfy both NUMBER and VARCHAR2 usages
------------------------------------------------- */
CREATE OR REPLACE PACKAGE SHB_SEC AS
  FUNCTION get_user_id(p_val NUMBER)   RETURN NUMBER;
  FUNCTION get_user_id(p_val VARCHAR2) RETURN VARCHAR2;
END SHB_SEC;
/
CREATE OR REPLACE PACKAGE BODY SHB_SEC AS
  FUNCTION get_user_id(p_val NUMBER) RETURN NUMBER IS BEGIN RETURN NVL(p_val,1); END;
  FUNCTION get_user_id(p_val VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN COALESCE(
      SYS_CONTEXT('APEX$SESSION','APP_USER'),
      SYS_CONTEXT('USERENV','CLIENT_IDENTIFIER'),
      SYS_CONTEXT('USERENV','SESSION_USER'),
      NVL(p_val,'SYSTEM')
    );
  END;
END SHB_SEC;
/

/* ------------------------------------------------
   3) Core tables (portable)
------------------------------------------------- */
CREATE TABLE MUMS.TBL_MUMS_PERSON (
  ID             NUMBER PRIMARY KEY,
  EMP_CODE       VARCHAR2(20),
  NATIONAL_CODE  VARCHAR2(20),
  FNAME          VARCHAR2(50),
  LNAME          VARCHAR2(50),
  FATHER_NAME    VARCHAR2(50),
  BIRTHDATE      DATE,
  BIRTHCITY_ID   NUMBER,
  GENDER         NUMBER(1,0),
  KHEDMAT        VARCHAR2(20),
  MARITAL_STATUS NUMBER(1,0),
  BLOOD          VARCHAR2(20),
  TEL_NUM        VARCHAR2(20),
  MOBILE_NUM     VARCHAR2(20),
  ADDRESS        VARCHAR2(500),
  PERSON_IMAGE   BLOB,
  EDUCATE_DEGREE VARCHAR2(20),
  EDUCATE_FIELD  VARCHAR2(500),
  EMAIL          VARCHAR2(50),
  WORKPLACE      VARCHAR2(50),
  CREATED        DATE,
  CREATED_BY     VARCHAR2(50),
  UPDATED        DATE,
  UPDATED_BY     VARCHAR2(50),
  STATUS         NUMBER,
  APP_ID         NUMBER,
  POSTAL_CODE    VARCHAR2(15),
  IMAGE_MIME_TYPE VARCHAR2(200),
  IMAGE_FILE     VARCHAR2(200),
  FILE_BLOB_DATE DATE,
  IMAGE_FILE_CHARSET VARCHAR2(255),
  IS_ACTIVE      NUMBER DEFAULT 1,
  CHILD_COUNT    NUMBER,
  SARBAZI        NUMBER(1,0),
  REG_ID         NUMBER,
  USER_TYPE      NUMBER DEFAULT 0,
  REGISTER_DATE  DATE,
  AELE_COUNT     NUMBER,
  GROUP_CODE     NUMBER,
  SHENASNAMEH_NUM VARCHAR2(20),
  PASS_NUM       VARCHAR2(30),
  CONFIRMED_DOCS NUMBER DEFAULT 0,
  PROV_ID        NUMBER,
  CITY_ID        NUMBER,
  DESCRIPTION    VARCHAR2(1000),
  DEATH_DATE     DATE
);

CREATE TABLE SHB.TBL_FISCAL_YEAR (
  ID    NUMBER PRIMARY KEY,
  TITLE NUMBER NOT NULL
);

CREATE TABLE SHB.TBL_CONDITIONS (
  ID NUMBER PRIMARY KEY,
  TITLE VARCHAR2(500),
  SERVICE_ID NUMBER,
  IS_ACTIVE NUMBER,
  CREATED DATE,
  CREATED_BY VARCHAR2(50),
  UPDATED DATE,
  UPDATED_BY VARCHAR2(50),
  DESCRIPTION VARCHAR2(1000),
  CODE NUMBER,
  MEASURE_UNIT_ID NUMBER,
  DATA_TYPE NUMBER
);

CREATE TABLE SHB.TBL_CONDITIONS_LOG (
  ID NUMBER,
  TITLE VARCHAR2(500),
  SERVICE_ID NUMBER,
  IS_ACTIVE NUMBER,
  CREATED DATE,
  CREATED_BY VARCHAR2(50),
  UPDATED DATE,
  UPDATED_BY VARCHAR2(50),
  DESCRIPTION VARCHAR2(1000),
  CODE NUMBER,
  MEASURE_UNIT_ID NUMBER,
  DATA_TYPE NUMBER,
  LOG_TYPE CHAR(1)
);

CREATE TABLE SHB.TBL_CONDITION_DTL (
  ID NUMBER PRIMARY KEY,
  CONDITION_ID NUMBER,
  MEMBER_GROUP_ID NUMBER,
  FISCAL_YEAR_ID NUMBER,
  IS_ACTIVE NUMBER DEFAULT 1,
  CREATED DATE,
  CREATED_BY VARCHAR2(50),
  UPDATED DATE,
  UPDATED_BY VARCHAR2(50),
  DESCRIPTION VARCHAR2(1000),
  CHAR_VALUE VARCHAR2(100),
  NUM_VALUE NUMBER,
  START_DATE DATE,
  BOOLEAN_VALUE NUMBER,
  DAY_LIMIT NUMBER,
  TITLE_DTL VARCHAR2(250),
  END_DATE DATE
);

CREATE TABLE SHB.TBL_CONDITION_DTL_LOG (
  LOG_ID NUMBER,
  ID NUMBER,
  CONDITION_ID NUMBER,
  MEMBER_GROUP_ID NUMBER,
  FISCAL_YEAR_ID NUMBER,
  IS_ACTIVE NUMBER,
  CREATED DATE,
  CREATED_BY VARCHAR2(50),
  UPDATED DATE,
  UPDATED_BY VARCHAR2(50),
  DESCRIPTION VARCHAR2(1000),
  CHAR_VALUE VARCHAR2(100),
  NUM_VALUE NUMBER,
  START_DATE DATE,
  BOOLEAN_VALUE NUMBER,
  DAY_LIMIT NUMBER,
  TITLE_DTL VARCHAR2(250),
  END_DATE DATE,
  LOG_TYPE CHAR(1)
);

CREATE TABLE SHB.TBL_MEMBER_PAY_PERIODS (
  ID NUMBER PRIMARY KEY,
  PERSON_ID NUMBER,
  FOLDER_ID NUMBER,
  AMOUNT NUMBER,
  PAY_DATE DATE,
  AMOUNT_YEAR NUMBER,
  CREATED DATE,
  CREATED_BY NUMBER,
  UPDATED DATE,
  UPDATED_BY NUMBER,
  IS_ACTIVE NUMBER DEFAULT 1,
  REFERENCE_ID VARCHAR2(50),
  STATUS NUMBER,
  AMOUNT_PAID NUMBER,
  DESCRIPTION VARCHAR2(1000),
  CODE_GROUP_ID NUMBER
);

CREATE TABLE SHB.TBL_ORGAN_PAY_DTL (
  ID NUMBER PRIMARY KEY,
  AMOUNT NUMBER,
  NATION_CODE VARCHAR2(20),
  ORGAN_NAME VARCHAR2(150),
  CREATED DATE,
  CREATED_BY NUMBER,
  UPDATED DATE,
  UPDATED_BY NUMBER,
  IS_ACTIVE NUMBER,
  DESCRIPTION VARCHAR2(1000),
  ORG_PERCENT NUMBER,
  PARENT_ID NUMBER,
  FISCAL_YEAR VARCHAR2(10),
  ORGAN_CODE VARCHAR2(50)
);

CREATE TABLE SHB.TBL_EXIT_HISTORY (
  ID NUMBER PRIMARY KEY,
  PERSON_ID NUMBER,
  USER_ID NUMBER,
  EXIT_TYPE NUMBER(1,0),
  CREATED DATE,
  CREATED_BY NUMBER,
  UPDATED DATE,
  UPDATED_BY NUMBER,
  IS_ACTIVE NUMBER(1,0) DEFAULT 1,
  STATUS NUMBER(1,0),
  REGISTER_CODE NUMBER,
  SEND_TO_DEPARTMENT NUMBER,
  OK_MALI NUMBER,
  OK_JAZB NUMBER,
  SOUD_AMOUNT NUMBER,
  SOUD_DOCUMENT BLOB,
  SOUD_DATE DATE,
  SOUD_DESC VARCHAR2(255),
  DESCRIPTION VARCHAR2(1000),
  IS_HEBEH NUMBER DEFAULT 0,
  HEBEH_AMOUNT NUMBER,
  MEMBER_AMOUNT NUMBER,
  ORG_AMOUNT NUMBER,
  TOTAL_POSSIBLE_AMOUNT NUMBER
);

/* ------------------------------------------------
   4) Sequences
------------------------------------------------- */
CREATE SEQUENCE SHB.TBL_MEMBER_PAY_PERIODS_SEQ START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SHB.TBL_ORGAN_PAY_DTL_SEQ      START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SHB.TBL_CONDITIONS_SEQ         START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SHB.TBL_CONDITION_DTL_SEQ      START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SHB.TBL_CONDITION_DTL_LOG_SEQ  START WITH 1 INCREMENT BY 1;

/* ------------------------------------------------
   5) Triggers
------------------------------------------------- */
CREATE OR REPLACE TRIGGER SHB.TBL_ORGAN_PAY_DTL_TRG
BEFORE INSERT OR UPDATE ON SHB.TBL_ORGAN_PAY_DTL
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN
    :NEW.ID := SHB.TBL_ORGAN_PAY_DTL_SEQ.NEXTVAL;
  END IF;
  IF INSERTING THEN
    :NEW.CREATED    := SYSDATE;
    :NEW.CREATED_BY := SHB_SEC.get_user_id(1);
  ELSIF UPDATING THEN
    :NEW.UPDATED    := SYSDATE;
    :NEW.UPDATED_BY := SHB_SEC.get_user_id(1);
  END IF;
END;
/
ALTER TRIGGER SHB.TBL_ORGAN_PAY_DTL_TRG ENABLE;
/

CREATE OR REPLACE TRIGGER SHB.TBL_MEMBER_PAY_PERIODS_TRG
BEFORE INSERT OR UPDATE ON SHB.TBL_MEMBER_PAY_PERIODS
FOR EACH ROW
BEGIN
  IF :NEW.ID IS NULL THEN
    :NEW.ID := SHB.TBL_MEMBER_PAY_PERIODS_SEQ.NEXTVAL;
  END IF;
  IF INSERTING THEN
    :NEW.CREATED    := SYSDATE;
    :NEW.CREATED_BY := SHB_SEC.get_user_id(1);
  ELSIF UPDATING THEN
    :NEW.UPDATED    := SYSDATE;
    :NEW.UPDATED_BY := SHB_SEC.get_user_id(1);
  END IF;
END;
/
ALTER TRIGGER SHB.TBL_MEMBER_PAY_PERIODS_TRG ENABLE;
/

CREATE OR REPLACE TRIGGER SHB.TR_CONDITIONS_AUDIT
BEFORE INSERT OR UPDATE ON SHB.TBL_CONDITIONS
FOR EACH ROW
DECLARE
  v_actor     VARCHAR2(128);
BEGIN
  v_actor := COALESCE(
    SYS_CONTEXT('APEX$SESSION','APP_USER'),
    SYS_CONTEXT('USERENV','SESSION_USER')
  );
  IF INSERTING THEN
    IF :NEW.ID IS NULL THEN :NEW.ID := SHB.TBL_CONDITIONS_SEQ.NEXTVAL; END IF;
    :NEW.CREATED    := SYSDATE;
    :NEW.CREATED_BY := NVL(:NEW.CREATED_BY, v_actor);
    :NEW.IS_ACTIVE  := NVL(:NEW.IS_ACTIVE, 1);
    INSERT INTO SHB.TBL_CONDITIONS_LOG
    (ID,TITLE,SERVICE_ID,IS_ACTIVE,CREATED,CREATED_BY,UPDATED,UPDATED_BY,DESCRIPTION,CODE,MEASURE_UNIT_ID,DATA_TYPE,LOG_TYPE)
    VALUES
    (:NEW.ID,:NEW.TITLE,:NEW.SERVICE_ID,:NEW.IS_ACTIVE,:NEW.CREATED,:NEW.CREATED_BY,:NEW.UPDATED,:NEW.UPDATED_BY,:NEW.DESCRIPTION,:NEW.CODE,:NEW.MEASURE_UNIT_ID,:NEW.DATA_TYPE,'I');
  ELSIF UPDATING THEN
    :NEW.UPDATED    := SYSDATE;
    :NEW.UPDATED_BY := NVL(:NEW.UPDATED_BY, v_actor);
    INSERT INTO SHB.TBL_CONDITIONS_LOG
    (ID,TITLE,SERVICE_ID,IS_ACTIVE,CREATED,CREATED_BY,UPDATED,UPDATED_BY,DESCRIPTION,CODE,MEASURE_UNIT_ID,DATA_TYPE,LOG_TYPE)
    VALUES
    (:NEW.ID,:NEW.TITLE,:NEW.SERVICE_ID,:NEW.IS_ACTIVE,:NEW.CREATED,:NEW.CREATED_BY,:NEW.UPDATED,:NEW.UPDATED_BY,:NEW.DESCRIPTION,:NEW.CODE,:NEW.MEASURE_UNIT_ID,:NEW.DATA_TYPE,'U');
  END IF;
END;
/
ALTER TRIGGER SHB.TR_CONDITIONS_AUDIT ENABLE;
/

CREATE OR REPLACE TRIGGER SHB.TRG_CONDITIONS_LOG
AFTER INSERT OR UPDATE OR DELETE ON SHB.TBL_CONDITIONS
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    INSERT INTO SHB.TBL_CONDITIONS_LOG
    (ID,TITLE,SERVICE_ID,IS_ACTIVE,CREATED,CREATED_BY,UPDATED,UPDATED_BY,DESCRIPTION,CODE,DATA_TYPE,MEASURE_UNIT_ID,LOG_TYPE)
    VALUES
    (:NEW.ID,:NEW.TITLE,:NEW.SERVICE_ID,:NEW.IS_ACTIVE,:NEW.CREATED,:NEW.CREATED_BY,:NEW.UPDATED,:NEW.UPDATED_BY,:NEW.DESCRIPTION,:NEW.CODE,:NEW.DATA_TYPE,:NEW.MEASURE_UNIT_ID,'I');
  ELSIF UPDATING THEN
    INSERT INTO SHB.TBL_CONDITIONS_LOG
    (ID,TITLE,SERVICE_ID,IS_ACTIVE,CREATED,CREATED_BY,UPDATED,UPDATED_BY,DESCRIPTION,CODE,DATA_TYPE,MEASURE_UNIT_ID,LOG_TYPE)
    VALUES
    (:NEW.ID,:NEW.TITLE,:NEW.SERVICE_ID,:NEW.IS_ACTIVE,:NEW.CREATED,:NEW.CREATED_BY,:NEW.UPDATED,:NEW.UPDATED_BY,:NEW.DESCRIPTION,:NEW.CODE,:NEW.DATA_TYPE,:NEW.MEASURE_UNIT_ID,'U');
  ELSIF DELETING THEN
    INSERT INTO SHB.TBL_CONDITIONS_LOG
    (ID,TITLE,SERVICE_ID,IS_ACTIVE,CREATED,CREATED_BY,UPDATED,UPDATED_BY,DESCRIPTION,CODE,DATA_TYPE,MEASURE_UNIT_ID,LOG_TYPE)
    VALUES
    (:OLD.ID,:OLD.TITLE,:OLD.SERVICE_ID,:OLD.IS_ACTIVE,:OLD.CREATED,:OLD.CREATED_BY,:OLD.UPDATED,:OLD.UPDATED_BY,:OLD.DESCRIPTION,:OLD.CODE,:OLD.DATA_TYPE,:OLD.MEASURE_UNIT_ID,'D');
  END IF;
END;
/
ALTER TRIGGER SHB.TRG_CONDITIONS_LOG ENABLE;
/

CREATE OR REPLACE TRIGGER SHB.TBL_CONDITIONS_TRG
BEFORE INSERT OR UPDATE ON SHB.TBL_CONDITIONS
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.ID IS NULL THEN :NEW.ID := SHB.TBL_CONDITIONS_SEQ.NEXTVAL; END IF;
    :NEW.CREATED    := SYSDATE;
    :NEW.CREATED_BY := NVL(:NEW.CREATED_BY, SHB_SEC.get_user_id('SYSTEM'));
    :NEW.IS_ACTIVE  := NVL(:NEW.IS_ACTIVE, 1);
    INSERT INTO SHB.TBL_CONDITIONS_LOG
    (ID,TITLE,SERVICE_ID,IS_ACTIVE,CREATED,CREATED_BY,UPDATED,UPDATED_BY,DESCRIPTION,CODE,MEASURE_UNIT_ID,DATA_TYPE,LOG_TYPE)
    VALUES
    (:NEW.ID,:NEW.TITLE,:NEW.SERVICE_ID,:NEW.IS_ACTIVE,:NEW.CREATED,:NEW.CREATED_BY,:NEW.UPDATED,:NEW.UPDATED_BY,:NEW.DESCRIPTION,:NEW.CODE,:NEW.MEASURE_UNIT_ID,:NEW.DATA_TYPE,'I');
  ELSIF UPDATING THEN
    :NEW.UPDATED    := SYSDATE;
    :NEW.UPDATED_BY := NVL(:NEW.UPDATED_BY, SHB_SEC.get_user_id('SYSTEM'));
    INSERT INTO SHB.TBL_CONDITIONS_LOG
    (ID,TITLE,SERVICE_ID,IS_ACTIVE,CREATED,CREATED_BY,UPDATED,UPDATED_BY,DESCRIPTION,CODE,MEASURE_UNIT_ID,DATA_TYPE,LOG_TYPE)
    VALUES
    (:NEW.ID,:NEW.TITLE,:NEW.SERVICE_ID,:NEW.IS_ACTIVE,:NEW.CREATED,:NEW.CREATED_BY,:NEW.UPDATED,:NEW.UPDATED_BY,:NEW.DESCRIPTION,:NEW.CODE,:NEW.MEASURE_UNIT_ID,:NEW.DATA_TYPE,'U');
  END IF;
END;
/
ALTER TRIGGER SHB.TBL_CONDITIONS_TRG ENABLE;
/

CREATE OR REPLACE TRIGGER SHB.TBL_CONDITION_DTL_BI
BEFORE INSERT ON SHB.TBL_CONDITION_DTL
FOR EACH ROW
WHEN (NEW.ID IS NULL)
BEGIN
  :NEW.ID := SHB.TBL_CONDITION_DTL_SEQ.NEXTVAL;
END;
/
ALTER TRIGGER SHB.TBL_CONDITION_DTL_BI ENABLE;
/

CREATE OR REPLACE TRIGGER SHB.TR_CONDITION_DTL_AUDIT
BEFORE INSERT OR UPDATE ON SHB.TBL_CONDITION_DTL
FOR EACH ROW
DECLARE
    v_user VARCHAR2(50) := SHB_SEC.get_user_id('SYSTEM');
BEGIN
    IF INSERTING THEN
        IF :NEW.ID IS NULL THEN :NEW.ID := SHB.TBL_CONDITION_DTL_SEQ.NEXTVAL; END IF;
        :NEW.CREATED := SYSDATE;
        :NEW.CREATED_BY := NVL(:NEW.CREATED_BY, v_user);
        INSERT INTO SHB.TBL_CONDITION_DTL_LOG (
            LOG_ID, ID, CONDITION_ID, MEMBER_GROUP_ID, FISCAL_YEAR_ID, IS_ACTIVE,
            CREATED, CREATED_BY, UPDATED, UPDATED_BY, DESCRIPTION, CHAR_VALUE,
            NUM_VALUE, START_DATE, BOOLEAN_VALUE, DAY_LIMIT, TITLE_DTL, END_DATE,
            LOG_TYPE
        ) VALUES (
            SHB.TBL_CONDITION_DTL_LOG_SEQ.NEXTVAL, :NEW.ID, :NEW.CONDITION_ID,
            :NEW.MEMBER_GROUP_ID, :NEW.FISCAL_YEAR_ID, :NEW.IS_ACTIVE, :NEW.CREATED,
            :NEW.CREATED_BY, :NEW.UPDATED, :NEW.UPDATED_BY, :NEW.DESCRIPTION,
            :NEW.CHAR_VALUE, :NEW.NUM_VALUE, :NEW.START_DATE, :NEW.BOOLEAN_VALUE,
            :NEW.DAY_LIMIT, :NEW.TITLE_DTL, :NEW.END_DATE, 'I'
        );
    ELSIF UPDATING THEN
        :NEW.UPDATED := SYSDATE;
        :NEW.UPDATED_BY := NVL(:NEW.UPDATED_BY, v_user);
        INSERT INTO SHB.TBL_CONDITION_DTL_LOG (
            LOG_ID, ID, CONDITION_ID, MEMBER_GROUP_ID, FISCAL_YEAR_ID, IS_ACTIVE,
            CREATED, CREATED_BY, UPDATED, UPDATED_BY, DESCRIPTION, CHAR_VALUE,
            NUM_VALUE, START_DATE, BOOLEAN_VALUE, DAY_LIMIT, TITLE_DTL, END_DATE,
            LOG_TYPE
        ) VALUES (
            SHB.TBL_CONDITION_DTL_LOG_SEQ.NEXTVAL, :NEW.ID, :NEW.CONDITION_ID,
            :NEW.MEMBER_GROUP_ID, :NEW.FISCAL_YEAR_ID, :NEW.IS_ACTIVE, :NEW.CREATED,
            :NEW.CREATED_BY, :NEW.UPDATED, :NEW.UPDATED_BY, :NEW.DESCRIPTION,
            :NEW.CHAR_VALUE, :NEW.NUM_VALUE, :NEW.START_DATE, :NEW.BOOLEAN_VALUE,
            :NEW.DAY_LIMIT, :NEW.TITLE_DTL, :NEW.END_DATE, 'U'
        );
    END IF;
END;
/
ALTER TRIGGER SHB.TR_CONDITION_DTL_AUDIT ENABLE;
/

CREATE OR REPLACE TRIGGER SHB.TR_CONDITION_DTL_DELETE
BEFORE DELETE ON SHB.TBL_CONDITION_DTL
FOR EACH ROW
BEGIN
    INSERT INTO SHB.TBL_CONDITION_DTL_LOG (
        LOG_ID, ID, CONDITION_ID, MEMBER_GROUP_ID, FISCAL_YEAR_ID, IS_ACTIVE,
        CREATED, CREATED_BY, UPDATED, UPDATED_BY, DESCRIPTION, CHAR_VALUE,
        NUM_VALUE, START_DATE, BOOLEAN_VALUE, DAY_LIMIT, TITLE_DTL, END_DATE,
        LOG_TYPE
    ) VALUES (
        SHB.TBL_CONDITION_DTL_LOG_SEQ.NEXTVAL, :OLD.ID, :OLD.CONDITION_ID,
        :OLD.MEMBER_GROUP_ID, :OLD.FISCAL_YEAR_ID, :OLD.IS_ACTIVE, :OLD.CREATED,
        :OLD.CREATED_BY, :OLD.UPDATED, :OLD.UPDATED_BY, :OLD.DESCRIPTION,
        :OLD.CHAR_VALUE, :OLD.NUM_VALUE, :OLD.START_DATE, :OLD.BOOLEAN_VALUE,
        :OLD.DAY_LIMIT, :OLD.TITLE_DTL, :OLD.END_DATE, 'D'
    );
END;
/
ALTER TRIGGER SHB.TR_CONDITION_DTL_DELETE ENABLE;
/

CREATE OR REPLACE TRIGGER SHB.TBL_CONDITION_DTL_TRG
BEFORE INSERT OR UPDATE ON SHB.TBL_CONDITION_DTL
FOR EACH ROW
DECLARE
  l_log_type CHAR(1);
  FUNCTION get_user_name RETURN VARCHAR2 IS
    l_app_user   VARCHAR2(256);
    l_client_id  VARCHAR2(256);
  BEGIN
    l_app_user  := SYS_CONTEXT('APEX$SESSION','APP_USER');
    l_client_id := SYS_CONTEXT('USERENV','CLIENT_IDENTIFIER');
    RETURN NVL(l_app_user, NVL(l_client_id, 'SYSTEM'));
  END get_user_name;
BEGIN
  IF INSERTING AND :NEW.ID IS NULL THEN
    :NEW.ID := SHB.TBL_CONDITION_DTL_SEQ.NEXTVAL;
  END IF;
  IF INSERTING THEN
    l_log_type := 'I';
    :NEW.CREATED    := SYSDATE;
    :NEW.CREATED_BY := NVL(:NEW.CREATED_BY, get_user_name);
  ELSIF UPDATING THEN
    l_log_type := 'U';
    :NEW.UPDATED    := SYSDATE;
    :NEW.UPDATED_BY := NVL(:NEW.UPDATED_BY, get_user_name);
  END IF;
  INSERT INTO SHB.TBL_CONDITION_DTL_LOG (
      LOG_ID, ID, CONDITION_ID, MEMBER_GROUP_ID, FISCAL_YEAR_ID, IS_ACTIVE,
      CREATED, CREATED_BY, UPDATED, UPDATED_BY, DESCRIPTION, CHAR_VALUE,
      NUM_VALUE, START_DATE, BOOLEAN_VALUE, DAY_LIMIT, TITLE_DTL, END_DATE,
      LOG_TYPE
  )
  VALUES (
      SHB.TBL_CONDITION_DTL_LOG_SEQ.NEXTVAL,
      :NEW.ID, :NEW.CONDITION_ID, :NEW.MEMBER_GROUP_ID, :NEW.FISCAL_YEAR_ID, :NEW.IS_ACTIVE,
      :NEW.CREATED, :NEW.CREATED_BY, :NEW.UPDATED, :NEW.UPDATED_BY, :NEW.DESCRIPTION,
      :NEW.CHAR_VALUE, :NEW.NUM_VALUE, :NEW.START_DATE, :NEW.BOOLEAN_VALUE,
      :NEW.DAY_LIMIT, :NEW.TITLE_DTL, :NEW.END_DATE,
      l_log_type
  );
END;
/
ALTER TRIGGER SHB.TBL_CONDITION_DTL_TRG ENABLE;
/

/* ------------------------------------------------
   6) Indexes
------------------------------------------------- */
CREATE INDEX SHB.IDX_MPP_PERSON_DATE ON SHB.TBL_MEMBER_PAY_PERIODS (PERSON_ID, PAY_DATE);
CREATE INDEX SHB.IDX_OPD_NAT_DATE    ON SHB.TBL_ORGAN_PAY_DTL (NATION_CODE, CREATED);
CREATE INDEX SHB.IDX_COND_FY_COND    ON SHB.TBL_CONDITION_DTL (FISCAL_YEAR_ID, CONDITION_ID);
CREATE INDEX SHB.IDX_FY_TITLE        ON SHB.TBL_FISCAL_YEAR (TITLE);
CREATE INDEX SHB.IDX_EXIT_PERSON     ON SHB.TBL_EXIT_HISTORY (PERSON_ID);

/* ------------------------------------------------
   7) Seed data
------------------------------------------------- */
ALTER SESSION SET NLS_CALENDAR='PERSIAN';

INSERT INTO MUMS.TBL_MUMS_PERSON (ID, NATIONAL_CODE, IS_ACTIVE) VALUES (9362, '1234567890', 1);

INSERT INTO SHB.TBL_FISCAL_YEAR (ID, TITLE) VALUES (1, 1399);
INSERT INTO SHB.TBL_FISCAL_YEAR (ID, TITLE) VALUES (2, 1400);
INSERT INTO SHB.TBL_FISCAL_YEAR (ID, TITLE) VALUES (3, 1401);
INSERT INTO SHB.TBL_FISCAL_YEAR (ID, TITLE) VALUES (4, 1402);
INSERT INTO SHB.TBL_FISCAL_YEAR (ID, TITLE) VALUES (5, 1403);
INSERT INTO SHB.TBL_FISCAL_YEAR (ID, TITLE) VALUES (6, 1404);

INSERT INTO SHB.TBL_CONDITIONS (ID,TITLE,CODE,IS_ACTIVE,CREATED,CREATED_BY)
VALUES (1033,'Ù…Ø¨Ù„Øº Ø­Ù‚ Ø¹Ø¶ÙˆÛŒØª',1033,1,SYSDATE,SHB_SEC.get_user_id('SYSTEM'));
INSERT INTO SHB.TBL_CONDITIONS (ID,TITLE,CODE,IS_ACTIVE,CREATED,CREATED_BY)
VALUES (1053,'Ø¯Ø±ØµØ¯ Ú©Ù…Ú© Ø³Ø§Ø²Ù…Ø§Ù†ÛŒ',1053,1,SYSDATE,SHB_SEC.get_user_id('SYSTEM'));
INSERT INTO SHB.TBL_CONDITIONS (ID,TITLE,CODE,IS_ACTIVE,CREATED,CREATED_BY)
VALUES (17,'Ù†Ø±Ø® Ø³ÙˆØ¯',17,1,SYSDATE,SHB_SEC.get_user_id('SYSTEM'));
INSERT INTO SHB.TBL_CONDITIONS (ID,TITLE,CODE,IS_ACTIVE,CREATED,CREATED_BY)
VALUES (10,'Ø­Ø¯Ø§Ù‚Ù„ Ø³Ù†ÙˆØ§Øª Ø¹Ø¶ÙˆÛŒØª',10,1,SYSDATE,SHB_SEC.get_user_id('SYSTEM'));

-- Ø´Ø±Ø· 10
INSERT INTO SHB.TBL_CONDITION_DTL (ID,CONDITION_ID,MEMBER_GROUP_ID,FISCAL_YEAR_ID,NUM_VALUE,CREATED,CREATED_BY)
VALUES (SHB.TBL_CONDITION_DTL_SEQ.NEXTVAL,10,0,6,2,SYSDATE,SHB_SEC.get_user_id('SYSTEM'));

DECLARE
  PROCEDURE ins(p_fy_id NUMBER, p_fee NUMBER, p_orgpct NUMBER, p_rate NUMBER) IS
  BEGIN
    INSERT INTO SHB.TBL_CONDITION_DTL (ID,CONDITION_ID,FISCAL_YEAR_ID,NUM_VALUE,CREATED,CREATED_BY)
    VALUES (SHB.TBL_CONDITION_DTL_SEQ.NEXTVAL,1033,p_fy_id,p_fee,SYSDATE,SHB_SEC.get_user_id('SYSTEM'));
    INSERT INTO SHB.TBL_CONDITION_DTL (ID,CONDITION_ID,FISCAL_YEAR_ID,NUM_VALUE,CREATED,CREATED_BY)
    VALUES (SHB.TBL_CONDITION_DTL_SEQ.NEXTVAL,1053,p_fy_id,p_orgpct,SYSDATE,SHB_SEC.get_user_id('SYSTEM'));
    INSERT INTO SHB.TBL_CONDITION_DTL (ID,CONDITION_ID,FISCAL_YEAR_ID,NUM_VALUE,CREATED,CREATED_BY)
    VALUES (SHB.TBL_CONDITION_DTL_SEQ.NEXTVAL,17,   p_fy_id,p_rate,SYSDATE,SHB_SEC.get_user_id('SYSTEM'));
  END;
BEGIN
  ins(1,1811828+0,30,13); -- 1399 Ù†Ù…ÙˆÙ†Ù‡ Ø´Ù…Ø§
  ins(2,2588314,30, 4);   -- 1400
  ins(3, 810000,30, 4);   -- 1401
  ins(4, 810000+1620000,30, 4); -- 1402 Ù…Ø¬Ù…ÙˆØ¹ Ø¯Ùˆ Ù¾Ø±Ø¯Ø§Ø®Øª Ù†Ù…ÙˆÙ†Ù‡
  ins(5,5124902,30, 4);   -- 1403
  ins(6,16000000,30, 4);  -- 1404 Ù†Ù…ÙˆÙ†Ù‡
END;
/
-- Member payments
INSERT INTO SHB.TBL_MEMBER_PAY_PERIODS (ID,PERSON_ID,AMOUNT,PAY_DATE,AMOUNT_YEAR,CREATED,CREATED_BY,IS_ACTIVE,AMOUNT_PAID)
VALUES (2481,9362,1811828,TO_DATE('21-NOV-20','DD-MON-RR'),1399,SYSDATE,1,1,1811828);
INSERT INTO SHB.TBL_MEMBER_PAY_PERIODS (ID,PERSON_ID,AMOUNT,PAY_DATE,AMOUNT_YEAR,CREATED,CREATED_BY,IS_ACTIVE,AMOUNT_PAID)
VALUES (2482,9362,2588314,TO_DATE('20-NOV-21','DD-MON-RR'),1400,SYSDATE,1,1,2588314);
INSERT INTO SHB.TBL_MEMBER_PAY_PERIODS (ID,PERSON_ID,AMOUNT,PAY_DATE,AMOUNT_YEAR,CREATED,CREATED_BY,IS_ACTIVE,AMOUNT_PAID)
VALUES (2485,9362,810000,TO_DATE('05-JUL-22','DD-MON-RR'),1401,SYSDATE,1,1,810000);
INSERT INTO SHB.TBL_MEMBER_PAY_PERIODS (ID,PERSON_ID,AMOUNT,PAY_DATE,AMOUNT_YEAR,CREATED,CREATED_BY,IS_ACTIVE,AMOUNT_PAID)
VALUES (2501,9362,810000,TO_DATE('21-MAR-23','DD-MON-RR'),1402,SYSDATE,1,1,810000);
INSERT INTO SHB.TBL_MEMBER_PAY_PERIODS (ID,PERSON_ID,AMOUNT,PAY_DATE,AMOUNT_YEAR,CREATED,CREATED_BY,IS_ACTIVE,AMOUNT_PAID)
VALUES (2484,9362,1620000,TO_DATE('13-MAY-23','DD-MON-RR'),1402,SYSDATE,1,1,1620000);
INSERT INTO SHB.TBL_MEMBER_PAY_PERIODS (ID,PERSON_ID,AMOUNT,PAY_DATE,AMOUNT_YEAR,CREATED,CREATED_BY,IS_ACTIVE,AMOUNT_PAID)
VALUES (2483,9362,5124902,TO_DATE('01-DEC-24','DD-MON-RR'),1403,SYSDATE,1,1,5124902);

-- Organ payments
INSERT INTO SHB.TBL_ORGAN_PAY_DTL (ID,AMOUNT,NATION_CODE,CREATED,IS_ACTIVE,ORG_PERCENT,FISCAL_YEAR,ORGAN_CODE)
VALUES (45,776500,'1234567890',TO_DATE('21-NOV-20','DD-MON-RR'),1,30,'1399','100');

-- Exit record
INSERT INTO SHB.TBL_EXIT_HISTORY (ID,PERSON_ID,EXIT_TYPE,CREATED,STATUS,OK_MALI,OK_JAZB,DESCRIPTION)
VALUES (1,9362,1,TO_DATE('23-AUG-25','DD-MON-RR'),1,1,1,'Ø®Ø±ÙˆØ¬ Ù†Ù…ÙˆÙ†Ù‡ Ø¨Ø±Ø§ÛŒ Ø¯Ù…Ùˆ');

COMMIT;

/* ------------------------------------------------
   8) FUNCTION (FULL from user)
------------------------------------------------- */
CREATE OR REPLACE FUNCTION FNC_GET_MEMBER_INTEREST_TBL ( P_ID IN NUMBER ) RETURN SHB.MEMBER_STATUS_SUMMARY_TBL AS
rec SHB.MEMBER_STATUS_SUMMARY_TBL;
V_ERRMSG VARCHAR2(4000);
V_NATIONAL_CODE VARCHAR2(20);
V_FIRST_REG_YEAR NUMBER := 0;
V_MINIMUM_YEARS NUMBER := 2;
V_TOTAL_YEARS NUMBER := 0;
V_YEARS_STR VARCHAR2(4000);
V_FULL_PAYMENT_EXISTS NUMBER := 0;
V_TOTAL_MEMBER_AMOUNT NUMBER := 0;
V_TOTAL_ORG_AMOUNT NUMBER := 0;
V_TOTAL_INTEREST_AMOUNT NUMBER := 0;
V_ELIGIBILITY NUMBER := 0;
V_REASON VARCHAR2(400);
V_DEBUG_INFO CLOB;
V_CURRENT_FISCAL_YEAR NUMBER;
V_EXIT_CREATED DATE;
V_BASE_DATE DATE;
V_PREV_YEAR NUMBER;
V_PREV_MONTH NUMBER;
V_LAST_DAY NUMBER;
V_CUTOFF_DATE DATE;
V_END_YEAR NUMBER;
V_END_MONTH NUMBER;
V_HAS_PAYMENT NUMBER := 0;
V_FISCAL_YEARS VARCHAR2(4000);
V_YEARLY_INTEREST_JSON CLOB;
V_YEARLY_MEMBERSHIP_AMOUNT_JSON CLOB;
V_YEARLY_ORG_CONTRIBUTION_JSON CLOB;
V_RATE_JSON CLOB;
V_MEMBER_GROUP_ID NUMBER := 0;
TYPE t_yearly_data IS TABLE OF CLOB INDEX BY PLS_INTEGER;
V_YEARLY_DATA t_yearly_data;
V_YEAR_COUNT NUMBER := 0;
cum_member NUMBER := 0;
cum_org NUMBER := 0;
V_LAST_MEMBERSHIP_FEE NUMBER := 0;
V_LAST_ORG_PERCENT NUMBER := 0; -- 0..1
V_LAST_RATE NUMBER := 4; -- Ø¯Ø±ØµØ¯
BEGIN
-- ØªÙ‚ÙˆÛŒÙ… Ø´Ù…Ø³ÛŒ
EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_CALENDAR=''PERSIAN''';
V_CURRENT_FISCAL_YEAR := TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY', 'nls_calendar=persian'));
DBMS_LOB.CREATETEMPORARY(V_DEBUG_INFO, TRUE);
DBMS_LOB.APPEND(V_DEBUG_INFO, 'ÙˆØ±ÙˆØ¯ÛŒ: P_ID=' || P_ID || ', ØªØ§Ø±ÛŒØ® Ø¬Ø§Ø±ÛŒ: ' || TO_CHAR(SYSDATE, 'YYYY/MM/DD HH24:MI:SS', 'nls_calendar=persian') );
----------------------------------------------------------------------
-- Û±) Ú©Ø¯ Ù…Ù„ÛŒ
----------------------------------------------------------------------
BEGIN
  SELECT NATIONAL_CODE INTO V_NATIONAL_CODE FROM MUMS.TBL_MUMS_PERSON WHERE ID = P_ID AND ROWNUM = 1;
  DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ú©Ø¯ Ù…Ù„ÛŒ:' || NVL(V_NATIONAL_CODE, 'Ù†Ø§Ù…ÙˆØ¬ÙˆØ¯'));
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    V_NATIONAL_CODE := NULL;
    DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ú©Ø¯ Ù…Ù„ÛŒ:Ù†Ø§Ù…ÙˆØ¬ÙˆØ¯');
  WHEN OTHERS THEN
    DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ø®Ø·Ø§ Ø¯Ø± Ø§Ø³ØªØ®Ø±Ø§Ø¬ Ú©Ø¯ Ù…Ù„ÛŒ:' || SQLERRM);
    V_REASON := 'Ø®Ø·Ø§ Ø¯Ø± Ø§Ø³ØªØ®Ø±Ø§Ø¬ Ú©Ø¯ Ù…Ù„ÛŒ: ' || SQLERRM;
    SELECT SHB.MEMBER_STATUS_SUMMARY(
      eligibility => 0, total_amount => 0, member_amount => 0, org_amount => 0,
      total_possible_amount => 0, total_interest_amount => 0, reason => V_REASON,
      first_reg_year => 0, debug_info => V_DEBUG_INFO,
      yearly_interest => NULL, yearly_membership_amount => NULL, yearly_org_contribution => NULL, rate => NULL, exit_date => NULL
    ) BULK COLLECT INTO rec FROM DUAL;
    DBMS_LOB.FREETEMPORARY(V_DEBUG_INFO);
    RETURN rec;
END;
----------------------------------------------------------------------
-- Û²) Ø­Ø¯Ø§Ù‚Ù„ Ø³Ø§Ù„â€ŒÙ‡Ø§ (CONDITION_ID=10)
----------------------------------------------------------------------
BEGIN
  SELECT NVL(dtl.NUM_VALUE, 2), NVL(dtl.MEMBER_GROUP_ID, 0)
  INTO V_MINIMUM_YEARS, V_MEMBER_GROUP_ID
  FROM SHB.TBL_CONDITION_DTL dtl
  WHERE dtl.CONDITION_ID = 10
    AND dtl.FISCAL_YEAR_ID = ( SELECT MAX(FISCAL_YEAR_ID) FROM SHB.TBL_CONDITION_DTL WHERE CONDITION_ID = 10 )
    AND ROWNUM = 1;
  DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ø­Ø¯Ø§Ù‚Ù„ Ø³Ø§Ù„â€ŒÙ‡Ø§:' || V_MINIMUM_YEARS || ',Ø´Ù†Ø§Ø³Ù‡ Ú¯Ø±ÙˆÙ‡ Ø¹Ø¶ÙˆÛŒØª:' || V_MEMBER_GROUP_ID);
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    V_MINIMUM_YEARS := 2; V_MEMBER_GROUP_ID := 0;
    DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ø­Ø¯Ø§Ù‚Ù„ Ø³Ø§Ù„â€ŒÙ‡Ø§:2 (Ù¾ÛŒØ´â€ŒÙ�Ø±Ø¶),Ø´Ù†Ø§Ø³Ù‡ Ú¯Ø±ÙˆÙ‡ Ø¹Ø¶ÙˆÛŒØª:0');
  WHEN OTHERS THEN
    DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ø®Ø·Ø§ Ø¯Ø± Ø§Ø³ØªØ®Ø±Ø§Ø¬ Ø­Ø¯Ø§Ù‚Ù„ Ø³Ø§Ù„â€ŒÙ‡Ø§:' || SQLERRM);
    V_MINIMUM_YEARS := 2; V_MEMBER_GROUP_ID := 0;
END;
----------------------------------------------------------------------
-- Û³) Ø§ÙˆÙ„ÛŒÙ† Ø³Ø§Ù„ Ø«Ø¨Øª (Ø§Ø² Ù¾Ø±Ø¯Ø§Ø®Øªâ€ŒÙ‡Ø§ÛŒ Ø¹Ø¶Ùˆ Ùˆ Ø³Ø§Ø²Ù…Ø§Ù†)
----------------------------------------------------------------------
BEGIN
  SELECT MIN(yy) INTO V_FIRST_REG_YEAR FROM (
    SELECT TO_NUMBER(TO_CHAR(PAY_DATE, 'YYYY', 'nls_calendar=persian')) yy
      FROM SHB.TBL_MEMBER_PAY_PERIODS
     WHERE PERSON_ID = P_ID AND PAY_DATE IS NOT NULL AND AMOUNT_PAID IS NOT NULL
    UNION ALL
    SELECT TO_NUMBER(TO_CHAR(CREATED, 'YYYY', 'nls_calendar=persian')) yy
      FROM SHB.TBL_ORGAN_PAY_DTL
     WHERE NATION_CODE = V_NATIONAL_CODE AND CREATED IS NOT NULL AND AMOUNT IS NOT NULL
  );
  IF V_FIRST_REG_YEAR IS NULL THEN
    V_FIRST_REG_YEAR := 0;
    DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ø³Ø§Ù„ Ø§ÙˆÙ„ÛŒÙ† Ø«Ø¨Øª:Ù†Ø§Ù…ÙˆØ¬ÙˆØ¯');
  ELSE
    DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ø³Ø§Ù„ Ø§ÙˆÙ„ÛŒÙ† Ø«Ø¨Øª:' || V_FIRST_REG_YEAR);
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    V_FIRST_REG_YEAR := 0;
    DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ø®Ø·Ø§ Ø¯Ø± Ø§Ø³ØªØ®Ø±Ø§Ø¬ Ø³Ø§Ù„ Ø§ÙˆÙ„ÛŒÙ† Ø«Ø¨Øª:' || SQLERRM);
END;
----------------------------------------------------------------------
-- Û´) Ø´Ù…Ø§Ø±Ø´ Ø³Ø§Ù„â€ŒÙ‡Ø§ÛŒ Ø¯Ø§Ø±Ø§ÛŒ Ù¾Ø±Ø¯Ø§Ø®Øª
----------------------------------------------------------------------
IF V_NATIONAL_CODE IS NOT NULL THEN
  SELECT COUNT(DISTINCT yy), LISTAGG(DISTINCT yy, ',') WITHIN GROUP (ORDER BY yy)
  INTO V_TOTAL_YEARS, V_YEARS_STR
  FROM (
    SELECT TO_NUMBER(TO_CHAR(PAY_DATE, 'YYYY', 'nls_calendar=persian')) yy
      FROM SHB.TBL_MEMBER_PAY_PERIODS
     WHERE PERSON_ID = P_ID AND PAY_DATE IS NOT NULL AND AMOUNT_PAID IS NOT NULL
    UNION
    SELECT TO_NUMBER(TO_CHAR(CREATED, 'YYYY', 'nls_calendar=persian')) yy
      FROM SHB.TBL_ORGAN_PAY_DTL
     WHERE NATION_CODE = V_NATIONAL_CODE AND CREATED IS NOT NULL AND AMOUNT IS NOT NULL
  );
  IF V_TOTAL_YEARS > 0 THEN V_HAS_PAYMENT := 1; END IF;
  DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ø³Ø§Ù„â€ŒÙ‡Ø§ÛŒ Ù¾Ø±Ø¯Ø§Ø®Øª:' || NVL(V_YEARS_STR, 'Ù†Ø§Ù…ÙˆØ¬ÙˆØ¯') || ',ØªØ¹Ø¯Ø§Ø¯ Ø³Ø§Ù„â€ŒÙ‡Ø§:' || V_TOTAL_YEARS);
END IF;
----------------------------------------------------------------------
-- Ûµ) Ø³Ø§Ù„â€ŒÙ‡Ø§ÛŒ Ù…Ø§Ù„ÛŒ Ù…ÙˆØ¬ÙˆØ¯
----------------------------------------------------------------------
BEGIN
  SELECT LISTAGG(TO_CHAR(TITLE), ',') WITHIN GROUP (ORDER BY TITLE)
  INTO V_FISCAL_YEARS
  FROM SHB.TBL_FISCAL_YEAR;
  DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ø³Ø§Ù„â€ŒÙ‡Ø§ÛŒ Ù…Ø§Ù„ÛŒ Ù…ÙˆØ¬ÙˆØ¯:' || NVL(V_FISCAL_YEARS, 'Ù†Ø§Ù…ÙˆØ¬ÙˆØ¯'));
EXCEPTION WHEN OTHERS THEN
  DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ø®Ø·Ø§ Ø¯Ø± Ø¨Ø±Ø±Ø³ÛŒ Ø³Ø§Ù„â€ŒÙ‡Ø§ÛŒ Ù…Ø§Ù„ÛŒ:' || SQLERRM);
END;

IF INSTR(V_FISCAL_YEARS, TO_CHAR(V_CURRENT_FISCAL_YEAR)) = 0 THEN
  V_REASON := 'Ø³Ø§Ù„ Ù…Ø§Ù„ÛŒ Ø¬Ø§Ø±ÛŒ (' || TO_CHAR(V_CURRENT_FISCAL_YEAR) || ') Ø¯Ø± TBL_FISCAL_YEAR ÙˆØ¬ÙˆØ¯ Ù†Ø¯Ø§Ø±Ø¯';
  SELECT SHB.MEMBER_STATUS_SUMMARY(
    eligibility => 0, total_amount => 0, member_amount => 0, org_amount => 0,
    total_possible_amount => 0, total_interest_amount => 0, reason => V_REASON,
    first_reg_year => V_FIRST_REG_YEAR, debug_info => V_DEBUG_INFO,
    yearly_interest => NULL, yearly_membership_amount => NULL, yearly_org_contribution => NULL, rate => NULL, exit_date => NULL
  ) BULK COLLECT INTO rec FROM DUAL;
  DBMS_LOB.FREETEMPORARY(V_DEBUG_INFO);
  RETURN rec;
END IF;
----------------------------------------------------------------------
-- Û¶) ÙˆØ¬ÙˆØ¯ Ø­Ø¯Ø§Ù‚Ù„ ÛŒÚ© Ø³Ø§Ù„ Ù¾Ø±Ø¯Ø§Ø®Øª Ú©Ø§Ù…Ù„
----------------------------------------------------------------------
BEGIN
  SELECT COUNT(*) INTO V_FULL_PAYMENT_EXISTS
  FROM (
    SELECT TO_NUMBER(TO_CHAR(m.PAY_DATE,'YYYY','nls_calendar=persian')) amount_year,
           SUM(m.AMOUNT_PAID) total_paid
      FROM SHB.TBL_MEMBER_PAY_PERIODS m
     WHERE m.PERSON_ID = P_ID
       AND m.PAY_DATE IS NOT NULL
       AND m.AMOUNT_PAID IS NOT NULL
     GROUP BY TO_NUMBER(TO_CHAR(m.PAY_DATE,'YYYY','nls_calendar=persian'))
  ) m
  JOIN SHB.TBL_FISCAL_YEAR f
    ON f.TITLE = m.amount_year
  JOIN SHB.TBL_CONDITION_DTL cd
    ON cd.FISCAL_YEAR_ID = f.ID AND cd.CONDITION_ID = 1033
  LEFT JOIN SHB.TBL_CONDITION_DTL cd2
    ON cd2.FISCAL_YEAR_ID = f.ID AND cd2.CONDITION_ID = 1053
 WHERE m.total_paid >= cd.NUM_VALUE * (1 - NVL(cd2.NUM_VALUE/100, 0))
   AND ROWNUM = 1;
  DBMS_LOB.APPEND(V_DEBUG_INFO, ',ÙˆØ¬ÙˆØ¯ Ù¾Ø±Ø¯Ø§Ø®Øª Ú©Ø§Ù…Ù„:' || V_FULL_PAYMENT_EXISTS);
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    V_FULL_PAYMENT_EXISTS := 0;
    DBMS_LOB.APPEND(V_DEBUG_INFO, ',ÙˆØ¬ÙˆØ¯ Ù¾Ø±Ø¯Ø§Ø®Øª Ú©Ø§Ù…Ù„:0');
  WHEN OTHERS THEN
    DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ø®Ø·Ø§ Ø¯Ø± Ø¨Ø±Ø±Ø³ÛŒ Ù¾Ø±Ø¯Ø§Ø®Øª Ú©Ø§Ù…Ù„:' || SQLERRM);
    V_FULL_PAYMENT_EXISTS := 0;
END;

IF V_HAS_PAYMENT = 0 THEN
  V_REASON := 'Ù‡ÛŒÚ† Ù¾Ø±Ø¯Ø§Ø®ØªÛŒ ÛŒØ§Ù�Øª Ù†Ø´Ø¯';
  SELECT SHB.MEMBER_STATUS_SUMMARY(
    eligibility => 0, total_amount => 0, member_amount => 0, org_amount => 0,
    total_possible_amount => 0, total_interest_amount => 0, reason => V_REASON,
    first_reg_year => V_FIRST_REG_YEAR, debug_info => V_DEBUG_INFO,
    yearly_interest => NULL, yearly_membership_amount => NULL, yearly_org_contribution => NULL, rate => NULL, exit_date => NULL
  ) BULK COLLECT INTO rec FROM DUAL;
  DBMS_LOB.FREETEMPORARY(V_DEBUG_INFO);
  RETURN rec;
END IF;
----------------------------------------------------------------------
-- Û·) ØªØ§Ø±ÛŒØ® Ù¾Ø§ÛŒÙ‡ Ø¨Ø±Ø§ÛŒ Ú©Ø§Øªâ€ŒØ¢Ù�
----------------------------------------------------------------------
BEGIN
  SELECT MAX(CREATED) INTO V_EXIT_CREATED
  FROM SHB.TBL_EXIT_HISTORY
  WHERE PERSON_ID = P_ID;
  DBMS_LOB.APPEND(V_DEBUG_INFO, ',ØªØ§Ø±ÛŒØ® ØªØ³ÙˆÛŒÙ‡:' || NVL(TO_CHAR(V_EXIT_CREATED, 'YYYY/MM/DD HH24:MI:SS', 'nls_calendar=persian'), 'Ù†Ø§Ù…ÙˆØ¬ÙˆØ¯') );
EXCEPTION WHEN OTHERS THEN
  V_EXIT_CREATED := NULL;
  DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ø®Ø·Ø§ Ø¯Ø± Ø®ÙˆØ§Ù†Ø¯Ù† TBL_EXIT_HISTORY:' || SQLERRM);
END;

IF V_EXIT_CREATED IS NULL THEN
  BEGIN
    SELECT NVL(MAX(dt), SYSDATE)
    INTO V_BASE_DATE
    FROM (
      SELECT PAY_DATE dt
        FROM SHB.TBL_MEMBER_PAY_PERIODS
       WHERE PERSON_ID = P_ID AND PAY_DATE IS NOT NULL AND AMOUNT_PAID IS NOT NULL
      UNION ALL
      SELECT CREATED
        FROM SHB.TBL_ORGAN_PAY_DTL
       WHERE NATION_CODE = V_NATIONAL_CODE AND CREATED IS NOT NULL AND AMOUNT IS NOT NULL
    );
    DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ø¢Ø®Ø±ÛŒÙ† Ù¾Ø±Ø¯Ø§Ø®Øª:' || TO_CHAR(V_BASE_DATE, 'YYYY/MM/DD HH24:MI:SS', 'nls_calendar=persian'));
  EXCEPTION WHEN OTHERS THEN
    V_BASE_DATE := SYSDATE;
    DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ø¢Ø®Ø±ÛŒÙ† Ù¾Ø±Ø¯Ø§Ø®Øª:Ù†Ø§Ù…ÙˆØ¬ÙˆØ¯, Ø§Ø³ØªÙ�Ø§Ø¯Ù‡ Ø§Ø² ØªØ§Ø±ÛŒØ® Ø¬Ø§Ø±ÛŒ');
  END;
ELSE
  V_BASE_DATE := V_EXIT_CREATED;
  DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ø§Ø³ØªÙ�Ø§Ø¯Ù‡ Ø§Ø² ØªØ§Ø±ÛŒØ® ØªØ³ÙˆÛŒÙ‡:' || TO_CHAR(V_BASE_DATE,'YYYY/MM/DD HH24:MI:SS','nls_calendar=persian'));
END IF;

V_PREV_YEAR  := TO_NUMBER(TO_CHAR(V_BASE_DATE, 'YYYY', 'nls_calendar=persian'));
V_PREV_MONTH := TO_NUMBER(TO_CHAR(V_BASE_DATE, 'MM' , 'nls_calendar=persian')) - 1;
IF V_PREV_MONTH = 0 THEN V_PREV_MONTH := 12; V_PREV_YEAR := V_PREV_YEAR - 1; END IF;
V_END_YEAR  := V_PREV_YEAR;
V_END_MONTH := V_PREV_MONTH;

IF V_END_MONTH <= 6 THEN V_LAST_DAY := 31;
ELSIF V_END_MONTH <= 11 THEN V_LAST_DAY := 30;
ELSE
  IF MOD(V_END_YEAR, 33) IN (1,5,9,13,17,22,26,30) THEN V_LAST_DAY := 30; ELSE V_LAST_DAY := 29; END IF;
END IF;

V_CUTOFF_DATE := TO_DATE( V_END_YEAR || '/' || LPAD(V_END_MONTH,2,'0') || '/' || LPAD(V_LAST_DAY,2,'0'),
                          'YYYY/MM/DD', 'nls_calendar=persian' );
DBMS_LOB.APPEND(V_DEBUG_INFO, ',cutoff=' || TO_CHAR(V_CUTOFF_DATE,'YYYY/MM/DD','nls_calendar=persian') ||
                              ',end_year=' || V_END_YEAR || ',end_month='|| V_END_MONTH ||
                              CASE WHEN V_EXIT_CREATED IS NOT NULL THEN ',exit_found=Y' ELSE ',exit_found=N' END );
----------------------------------------------------------------------
-- Û¸) Ù…Ø­Ø§Ø³Ø¨Ù‡ Ø³ÙˆØ¯ Ùˆ ØªØ¬Ù…ÛŒØ¹â€ŒÙ‡Ø§
----------------------------------------------------------------------
BEGIN
  DBMS_LOB.CREATETEMPORARY(V_YEARLY_INTEREST_JSON, TRUE);
  DBMS_LOB.APPEND(V_YEARLY_INTEREST_JSON, '[');
  V_LAST_MEMBERSHIP_FEE := 0;
  V_LAST_ORG_PERCENT := 0;
  V_LAST_RATE := 4;

  FOR year_rec IN (
    SELECT TO_CHAR(f.TITLE) AS fiscal_year, f.ID AS fiscal_year_id
    FROM SHB.TBL_FISCAL_YEAR f
    WHERE (V_FIRST_REG_YEAR = 0 OR TO_NUMBER(f.TITLE) >= V_FIRST_REG_YEAR)
      AND TO_NUMBER(f.TITLE) <= V_END_YEAR
    ORDER BY TO_NUMBER(f.TITLE)
  ) LOOP
    DECLARE
      TYPE t_payment IS RECORD (
        deposit_type VARCHAR2(12), -- MEMBER / ORG / PREV_MEMBER / PREV_ORG
        deposit_date DATE,
        deposit_amount NUMBER,
        deposit_month NUMBER
      );
      TYPE t_payments IS TABLE OF t_payment;
      V_PAYMENTS t_payments;

      TYPE t_monthly IS RECORD (
        month NUMBER,
        full_days NUMBER,
        member_amount NUMBER,
        org_amount NUMBER,
        membership_fee NUMBER,
        member_payment NUMBER,
        org_payment NUMBER,
        member_interest NUMBER,
        organ_interest NUMBER,
        total_interest NUMBER
      );
      TYPE t_monthlies IS TABLE OF t_monthly;
      V_MONTHLIES t_monthlies;

      V_FISCAL_YEAR VARCHAR2(4) := year_rec.fiscal_year;
      V_FISCAL_YEAR_ID NUMBER := year_rec.fiscal_year_id;

      V_PREV_MEMBER NUMBER := cum_member;
      V_PREV_ORG NUMBER := cum_org;

      V_MEMBERSHIP_FEE NUMBER;
      V_ORG_PERCENT NUMBER; -- 0..1
      V_RATE NUMBER; -- Ø¯Ø±ØµØ¯ Ø³Ø§Ù„Ø§Ù†Ù‡

      V_MEMBER_AMOUNT NUMBER;
      V_ORG_AMOUNT NUMBER;

      V_INTEREST NUMBER := 0;
      V_MEMBER_INTEREST NUMBER := 0;
      V_ORGAN_INTEREST NUMBER := 0;
      V_ACTUAL_MEMBER_PAID NUMBER := 0;
      V_ACTUAL_ORG_PAID NUMBER := 0;

      current_member_balance NUMBER;
      current_org_balance NUMBER;
      v_count NUMBER;
      V_MAX_MONTH NUMBER := CASE WHEN TO_NUMBER(V_FISCAL_YEAR) = V_END_YEAR THEN V_END_MONTH ELSE 12 END;
      v_temp CLOB;
    BEGIN
      IF TO_NUMBER(V_FISCAL_YEAR) > V_END_YEAR THEN CONTINUE; END IF;
      DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ù…Ø­Ø§Ø³Ø¨Ù‡ Ø¨Ø±Ø§ÛŒ Ø³Ø§Ù„ Ù…Ø§Ù„ÛŒ:'||V_FISCAL_YEAR||',Ø­Ø¯Ø§Ú©Ø«Ø± Ù…Ø§Ù‡:'||V_MAX_MONTH);

      -- Ø´Ø±Ø·â€ŒÙ‡Ø§ Ø¨Ø±Ø§ÛŒ Ø³Ø§Ù„
      BEGIN
        SELECT cd.NUM_VALUE, NVL(cd2.NUM_VALUE/100, 0), NVL(cd3.NUM_VALUE, 4)
        INTO V_MEMBERSHIP_FEE, V_ORG_PERCENT, V_RATE
        FROM SHB.TBL_CONDITION_DTL cd
        LEFT JOIN SHB.TBL_CONDITION_DTL cd2
               ON cd2.FISCAL_YEAR_ID = V_FISCAL_YEAR_ID AND cd2.CONDITION_ID = 1053
        LEFT JOIN SHB.TBL_CONDITION_DTL cd3
               ON cd3.FISCAL_YEAR_ID = V_FISCAL_YEAR_ID AND cd3.CONDITION_ID = 17
       WHERE cd.FISCAL_YEAR_ID = V_FISCAL_YEAR_ID AND cd.CONDITION_ID = 1033;
        V_LAST_MEMBERSHIP_FEE := V_MEMBERSHIP_FEE;
        V_LAST_ORG_PERCENT := V_ORG_PERCENT;
        V_LAST_RATE := V_RATE;
      EXCEPTION WHEN NO_DATA_FOUND THEN
        V_MEMBERSHIP_FEE := V_LAST_MEMBERSHIP_FEE;
        V_ORG_PERCENT := V_LAST_ORG_PERCENT;
        V_RATE := V_LAST_RATE;
        DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ø´Ø±Ø§ÛŒØ· Ø¨Ø±Ø§ÛŒ Ø³Ø§Ù„ '||V_FISCAL_YEAR||' ÛŒØ§Ù�Øª Ù†Ø´Ø¯, Ø§Ø³ØªÙ�Ø§Ø¯Ù‡ Ø§Ø² Ø´Ø±Ø§ÛŒØ· Ø³Ø§Ù„ Ù‚Ø¨Ù„');
      END;

      V_MEMBER_AMOUNT := V_MEMBERSHIP_FEE * (1 - V_ORG_PERCENT);
      V_ORG_AMOUNT := V_MEMBERSHIP_FEE * V_ORG_PERCENT;

      -- Ø¬Ù…Ø¹ Ù¾Ø±Ø¯Ø§Ø®Øª ÙˆØ§Ù‚Ø¹ÛŒ ØªØ§ Ú©Ø§Øªâ€ŒØ¢Ù�
      SELECT NVL(SUM(m.AMOUNT_PAID),0)
        INTO V_ACTUAL_MEMBER_PAID
        FROM SHB.TBL_MEMBER_PAY_PERIODS m
       WHERE m.PERSON_ID = P_ID
         AND m.AMOUNT_PAID IS NOT NULL
         AND m.PAY_DATE IS NOT NULL
         AND TO_NUMBER(TO_CHAR(m.PAY_DATE, 'YYYY', 'nls_calendar=persian')) = TO_NUMBER(V_FISCAL_YEAR)
         AND m.PAY_DATE <= V_CUTOFF_DATE;

      SELECT NVL(SUM(o.AMOUNT),0)
        INTO V_ACTUAL_ORG_PAID
        FROM SHB.TBL_ORGAN_PAY_DTL o
       WHERE o.NATION_CODE = V_NATIONAL_CODE
         AND o.AMOUNT IS NOT NULL
         AND o.CREATED IS NOT NULL
         AND TO_NUMBER(TO_CHAR(o.CREATED, 'YYYY', 'nls_calendar=persian')) = TO_NUMBER(V_FISCAL_YEAR)
         AND o.CREATED <= V_CUTOFF_DATE;

      DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ù¾Ø±Ø¯Ø§Ø®Øª Ø¹Ø¶Ùˆ:'||V_ACTUAL_MEMBER_PAID||',Ù¾Ø±Ø¯Ø§Ø®Øª Ø³Ø§Ø²Ù…Ø§Ù†:'||V_ACTUAL_ORG_PAID);

      -- Ù„ÛŒØ³Øª Ù¾Ø±Ø¯Ø§Ø®Øªâ€ŒÙ‡Ø§ (Ø¨Ù‡â€ŒÙ‡Ù…Ø±Ø§Ù‡ Ù…ÙˆØ¬ÙˆØ¯ÛŒ Ø§Ø¨ØªØ¯Ø§ÛŒ Ø³Ø§Ù„)
      SELECT * BULK COLLECT INTO V_PAYMENTS FROM (
        SELECT 'MEMBER' AS deposit_type, m.PAY_DATE AS deposit_date, m.AMOUNT_PAID AS deposit_amount,
               TO_NUMBER(TO_CHAR(m.PAY_DATE,'MM','nls_calendar=persian')) AS deposit_month
          FROM SHB.TBL_MEMBER_PAY_PERIODS m
         WHERE m.PERSON_ID = P_ID
           AND m.AMOUNT_PAID IS NOT NULL
           AND m.PAY_DATE IS NOT NULL
           AND TO_NUMBER(TO_CHAR(m.PAY_DATE,'YYYY','nls_calendar=persian')) = TO_NUMBER(V_FISCAL_YEAR)
           AND m.PAY_DATE <= V_CUTOFF_DATE
        UNION ALL
        SELECT 'ORG', o.CREATED, o.AMOUNT,
               TO_NUMBER(TO_CHAR(o.CREATED,'MM','nls_calendar=persian'))
          FROM SHB.TBL_ORGAN_PAY_DTL o
         WHERE o.NATION_CODE = V_NATIONAL_CODE
           AND o.AMOUNT IS NOT NULL
           AND o.CREATED IS NOT NULL
           AND TO_NUMBER(TO_CHAR(o.CREATED,'YYYY','nls_calendar=persian')) = TO_NUMBER(V_FISCAL_YEAR)
           AND o.CREATED <= V_CUTOFF_DATE
        UNION ALL
        SELECT 'PREV_MEMBER', TO_DATE(V_FISCAL_YEAR||'/01/01','YYYY/MM/DD','nls_calendar=persian'), V_PREV_MEMBER, 1 FROM DUAL WHERE V_PREV_MEMBER > 0
        UNION ALL
        SELECT 'PREV_ORG',    TO_DATE(V_FISCAL_YEAR||'/01/01','YYYY/MM/DD','nls_calendar=persian'), V_PREV_ORG,    1 FROM DUAL WHERE V_PREV_ORG > 0
      );

      -- Ø¬Ø²Ø¦ÛŒØ§Øª Ù…Ø§Ù‡Ø§Ù†Ù‡ ØªØ§ Ù…Ø§Ù‡ Ú©Ø§Øªâ€ŒØ¢Ù�
      SELECT month, full_days, member_amount, org_amount, membership_fee, member_payment, org_payment, member_interest, organ_interest, total_interest
      BULK COLLECT INTO V_MONTHLIES
      FROM (
        WITH months AS ( SELECT LEVEL AS month FROM DUAL CONNECT BY LEVEL <= V_MAX_MONTH ),
        mc AS (
          SELECT m.month, dd.deposit_type, dd.deposit_amount, dd.deposit_month, dd.deposit_date, V_RATE AS rate,
                 CASE WHEN MOD(TO_NUMBER(V_FISCAL_YEAR),33) IN (1,5,9,13,17,22,26,30) THEN 36600 ELSE 36500 END AS base36500,
                 CASE WHEN m.month <= 6 THEN 31 WHEN m.month <= 11 THEN 30 WHEN MOD(TO_NUMBER(V_FISCAL_YEAR),33) IN (1,5,9,13,17,22,26,30) THEN 30 ELSE 29 END AS full_days,
                 CASE
                   WHEN m.month = dd.deposit_month THEN
                     (CASE WHEN dd.deposit_type IN ('PREV_MEMBER','PREV_ORG') THEN
                        CASE WHEN m.month <= 6 THEN 31 WHEN m.month <= 11 THEN 30 WHEN MOD(TO_NUMBER(V_FISCAL_YEAR),33) IN (1,5,9,13,17,22,26,30) THEN 30 ELSE 29 END
                      ELSE
                        (CASE WHEN m.month <= 6 THEN 31 WHEN m.month <= 11 THEN 30 WHEN MOD(TO_NUMBER(V_FISCAL_YEAR),33) IN (1,5,9,13,17,22,26,30) THEN 30 ELSE 29 END
                          - TO_NUMBER(TO_CHAR(dd.deposit_date,'DD','nls_calendar=persian')) + 1)
                      END)
                   WHEN m.month > dd.deposit_month THEN
                     CASE WHEN m.month <= 6 THEN 31 WHEN m.month <= 11 THEN 30 WHEN MOD(TO_NUMBER(V_FISCAL_YEAR),33) IN (1,5,9,13,17,22,26,30) THEN 30 ELSE 29 END
                   ELSE 0 END AS days_in_month,
                 CASE WHEN dd.deposit_type LIKE 'PREV%' THEN 0
                      WHEN m.month = dd.deposit_month THEN dd.deposit_amount ELSE 0 END AS monthly_payment
          FROM (
            SELECT 'MEMBER' deposit_type, NVL(m.PAY_DATE, TO_DATE(V_FISCAL_YEAR||'/01/01','YYYY/MM/DD','nls_calendar=persian')) deposit_date,
                   m.AMOUNT_PAID deposit_amount,
                   TO_NUMBER(TO_CHAR(NVL(m.PAY_DATE, TO_DATE(V_FISCAL_YEAR||'/01/01','YYYY/MM/DD','nls_calendar=persian')), 'MM','nls_calendar=persian')) deposit_month
              FROM SHB.TBL_MEMBER_PAY_PERIODS m
             WHERE m.PERSON_ID = P_ID
               AND m.AMOUNT_PAID IS NOT NULL
               AND m.PAY_DATE IS NOT NULL
               AND TO_NUMBER(TO_CHAR(m.PAY_DATE,'YYYY','nls_calendar=persian')) = TO_NUMBER(V_FISCAL_YEAR)
               AND m.PAY_DATE <= V_CUTOFF_DATE
            UNION ALL
            SELECT 'ORG', NVL(o.CREATED, TO_DATE(V_FISCAL_YEAR||'/01/01','YYYY/MM/DD','nls_calendar=persian')),
                   o.AMOUNT,
                   TO_NUMBER(TO_CHAR(NVL(o.CREATED, TO_DATE(V_FISCAL_YEAR||'/01/01','YYYY/MM/DD','nls_calendar=persian')), 'MM','nls_calendar=persian'))
              FROM SHB.TBL_ORGAN_PAY_DTL o
             WHERE o.NATION_CODE = V_NATIONAL_CODE
               AND o.AMOUNT IS NOT NULL
               AND o.CREATED IS NOT NULL
               AND TO_NUMBER(TO_CHAR(o.CREATED,'YYYY','nls_calendar=persian')) = TO_NUMBER(V_FISCAL_YEAR)
               AND o.CREATED <= V_CUTOFF_DATE
            UNION ALL
            SELECT 'PREV_MEMBER', TO_DATE(V_FISCAL_YEAR||'/01/01','YYYY/MM/DD','nls_calendar=persian'), V_PREV_MEMBER, 1 FROM DUAL WHERE V_PREV_MEMBER > 0
            UNION ALL
            SELECT 'PREV_ORG',    TO_DATE(V_FISCAL_YEAR||'/01/01','YYYY/MM/DD','nls_calendar=persian'), V_PREV_ORG,    1 FROM DUAL WHERE V_PREV_ORG > 0
          ) dd
          CROSS JOIN months m
          WHERE m.month >= dd.deposit_month
        ),
        summed AS (
          SELECT m.month,
                 CASE WHEN m.month <= 6 THEN 31 WHEN m.month <= 11 THEN 30 WHEN MOD(TO_NUMBER(V_FISCAL_YEAR),33) IN (1,5,9,13,17,22,26,30) THEN 30 ELSE 29 END AS full_days,
                 V_MEMBER_AMOUNT AS member_amount,
                 V_ORG_AMOUNT    AS org_amount,
                 V_MEMBERSHIP_FEE AS membership_fee,
                 NVL(SUM(CASE WHEN mc.deposit_type='MEMBER' THEN mc.monthly_payment ELSE 0 END),0) AS member_payment,
                 NVL(SUM(CASE WHEN mc.deposit_type='ORG'    THEN mc.monthly_payment ELSE 0 END),0) AS org_payment,
                 NVL(SUM(CASE WHEN mc.deposit_type IN ('MEMBER','PREV_MEMBER') THEN ROUND(mc.deposit_amount * mc.rate * mc.days_in_month / mc.base36500, 2) ELSE 0 END),0) AS member_interest,
                 NVL(SUM(CASE WHEN mc.deposit_type IN ('ORG','PREV_ORG') THEN ROUND(mc.deposit_amount * mc.rate * mc.days_in_month / mc.base36500, 2) ELSE 0 END),0) AS organ_interest
          FROM (SELECT LEVEL AS month FROM DUAL CONNECT BY LEVEL <= V_MAX_MONTH) m
          LEFT JOIN mc ON mc.month = m.month
          GROUP BY m.month
        )
        SELECT month, full_days, member_amount, org_amount, membership_fee, member_payment, org_payment,
               member_interest, organ_interest, (member_interest + organ_interest) AS total_interest
        FROM summed
        ORDER BY month
      );

      -- Ø¬Ù…Ø¹ Ø³ÙˆØ¯ Ø³Ø§Ù„Ø§Ù†Ù‡
      V_INTEREST := 0; V_MEMBER_INTEREST := 0; V_ORGAN_INTEREST := 0;
      FOR i IN 1 .. V_MONTHLIES.COUNT LOOP
        V_INTEREST := V_INTEREST + V_MONTHLIES(i).total_interest;
        V_MEMBER_INTEREST := V_MEMBER_INTEREST + V_MONTHLIES(i).member_interest;
        V_ORGAN_INTEREST := V_ORGAN_INTEREST + V_MONTHLIES(i).organ_interest;
      END LOOP;

      -- Ø¨Ù‡â€ŒØ±ÙˆØ²Ø±Ø³Ø§Ù†ÛŒ ØªØ¬Ù…ÛŒØ¹â€ŒÙ‡Ø§
      V_TOTAL_MEMBER_AMOUNT := V_TOTAL_MEMBER_AMOUNT + V_ACTUAL_MEMBER_PAID;
      V_TOTAL_ORG_AMOUNT    := V_TOTAL_ORG_AMOUNT + V_ACTUAL_ORG_PAID;
      V_TOTAL_INTEREST_AMOUNT := V_TOTAL_INTEREST_AMOUNT + V_INTEREST;

      -- Ù…Ø§Ù†Ø¯Ù‡â€ŒÙ‡Ø§ÛŒ ØªØ¬Ù…ÛŒØ¹ÛŒ
      cum_member := V_PREV_MEMBER + V_ACTUAL_MEMBER_PAID + V_MEMBER_INTEREST;
      cum_org    := V_PREV_ORG    + V_ACTUAL_ORG_PAID    + V_ORGAN_INTEREST;

      -- Ø³Ø§Ø®Øª JSON Ø³Ø§Ù„Ø§Ù†Ù‡
      DBMS_LOB.CREATETEMPORARY(v_temp, TRUE);
      DBMS_LOB.APPEND(v_temp, '{');
      DBMS_LOB.APPEND(v_temp, '"year":"' || V_FISCAL_YEAR || '",');
      DBMS_LOB.APPEND(v_temp, '"interest":' || TO_CHAR(V_INTEREST) || ',');
      DBMS_LOB.APPEND(v_temp, '"rate":' || TO_CHAR(V_RATE) || ',');
      DBMS_LOB.APPEND(v_temp, '"org_contribution_percent":' || TO_CHAR(V_ORG_PERCENT*100) || ',');
      DBMS_LOB.APPEND(v_temp, '"member_contribution_percent":' || TO_CHAR((1-V_ORG_PERCENT)*100) || ',');
      DBMS_LOB.APPEND(v_temp, '"org_contribution_amount":' || TO_CHAR(V_ORG_AMOUNT) || ',');
      DBMS_LOB.APPEND(v_temp, '"member_contribution_amount":' || TO_CHAR(V_MEMBER_AMOUNT) || ',');
      DBMS_LOB.APPEND(v_temp, '"membership_amount":' || TO_CHAR(V_MEMBER_AMOUNT) || ',');
      DBMS_LOB.APPEND(v_temp, '"membership_fee":' || TO_CHAR(V_MEMBERSHIP_FEE) || ',');
      DBMS_LOB.APPEND(v_temp, '"org_paid_amount":' || TO_CHAR(V_ACTUAL_ORG_PAID) || ',');
      DBMS_LOB.APPEND(v_temp, '"member_paid_amount":' || TO_CHAR(V_ACTUAL_MEMBER_PAID) || ',');
      DBMS_LOB.APPEND(v_temp, '"prev_member_amount":' || TO_CHAR(V_PREV_MEMBER) || ',');
      DBMS_LOB.APPEND(v_temp, '"prev_org_amount":' || TO_CHAR(V_PREV_ORG) || ',');
      DBMS_LOB.APPEND(v_temp, '"monthly_details":[');

      current_member_balance := V_PREV_MEMBER;
      current_org_balance    := V_PREV_ORG;

      FOR i IN 1 .. V_MONTHLIES.COUNT LOOP
        IF i > 1 THEN DBMS_LOB.APPEND(v_temp, ','); END IF;
        DBMS_LOB.APPEND(v_temp, '{');
        DBMS_LOB.APPEND(v_temp, '"month":' || V_MONTHLIES(i).month || ',');
        DBMS_LOB.APPEND(v_temp, '"days":' || V_MONTHLIES(i).full_days || ',');
        DBMS_LOB.APPEND(v_temp, '"member_amount":' || TO_CHAR(V_MONTHLIES(i).member_amount) || ',');
        DBMS_LOB.APPEND(v_temp, '"org_amount":' || TO_CHAR(V_MONTHLIES(i).org_amount) || ',');
        DBMS_LOB.APPEND(v_temp, '"membership_fee":' || TO_char(V_MONTHLIES(i).membership_fee) || ',');
        DBMS_LOB.APPEND(v_temp, '"member_payment":' || TO_CHAR(V_MONTHLIES(i).member_payment) || ',');
        DBMS_LOB.APPEND(v_temp, '"org_payment":' || TO_CHAR(V_MONTHLIES(i).org_payment) || ',');
        DBMS_LOB.APPEND(v_temp, '"member_interest":' || TO_CHAR(V_MONTHLIES(i).member_interest) || ',');
        DBMS_LOB.APPEND(v_temp, '"organ_interest":' || TO_CHAR(V_MONTHLIES(i).organ_interest) || ',');
        DBMS_LOB.APPEND(v_temp, '"total_interest":' || TO_CHAR(V_MONTHLIES(i).total_interest) || ',');
        DBMS_LOB.APPEND(v_temp, '"prev_member_amount":' || TO_CHAR(current_member_balance) || ',');
        DBMS_LOB.APPEND(v_temp, '"prev_org_amount":' || TO_CHAR(current_org_balance) || ',');

        DBMS_LOB.APPEND(v_temp, '"payments":[');
        v_count := 0;
        FOR j IN 1 .. NVL(V_PAYMENTS.COUNT,0) LOOP
          IF V_PAYMENTS(j).deposit_month = V_MONTHLIES(i).month THEN
            IF v_count > 0 THEN DBMS_LOB.APPEND(v_temp, ','); END IF;
            v_count := v_count + 1;
            DBMS_LOB.APPEND(v_temp, '{"type":"' || V_PAYMENTS(j).deposit_type ||
                             '","date":' || CASE WHEN V_PAYMENTS(j).deposit_date IS NULL THEN 'null' ELSE '"'||TO_CHAR(V_PAYMENTS(j).deposit_date,'YYYY/MM/DD','nls_calendar=persian')||'"' END ||
                             ',"amount":' || TO_CHAR(V_PAYMENTS(j).deposit_amount) || '}');
          END IF;
        END LOOP;
        IF v_count = 0 THEN DBMS_LOB.APPEND(v_temp, '{"type":"none","date":null,"amount":0}'); END IF;
        DBMS_LOB.APPEND(v_temp, ']');

        DBMS_LOB.APPEND(v_temp, '}');

        current_member_balance := current_member_balance + V_MONTHLIES(i).member_payment + V_MONTHLIES(i).member_interest;
        current_org_balance    := current_org_balance    + V_MONTHLIES(i).org_payment    + V_MONTHLIES(i).organ_interest;
      END LOOP;
      DBMS_LOB.APPEND(v_temp, ']}');

      V_YEAR_COUNT := V_YEAR_COUNT + 1;
      V_YEARLY_DATA(V_YEAR_COUNT) := v_temp;
    END;
  END LOOP;

  -- Ù…ÙˆÙ†ØªØ§Ú˜ JSON Ø³Ø§Ù„Ø§Ù†Ù‡
  FOR i IN 1 .. V_YEAR_COUNT LOOP
    IF i > 1 THEN DBMS_LOB.APPEND(V_YEARLY_INTEREST_JSON, ','); END IF;
    DBMS_LOB.APPEND(V_YEARLY_INTEREST_JSON, V_YEARLY_DATA(i));
  END LOOP;
  DBMS_LOB.APPEND(V_YEARLY_INTEREST_JSON, ']');

  -- JSON Ù‡Ø§ÛŒ Ø®Ù„Ø§ØµÙ‡
  DBMS_LOB.CREATETEMPORARY(V_YEARLY_MEMBERSHIP_AMOUNT_JSON, TRUE);
  DBMS_LOB.CREATETEMPORARY(V_YEARLY_ORG_CONTRIBUTION_JSON, TRUE);
  DBMS_LOB.CREATETEMPORARY(V_RATE_JSON, TRUE);
  DBMS_LOB.APPEND(V_YEARLY_MEMBERSHIP_AMOUNT_JSON, '[');
  DBMS_LOB.APPEND(V_YEARLY_ORG_CONTRIBUTION_JSON, '[');
  DBMS_LOB.APPEND(V_RATE_JSON, '[');

  FOR i IN 1 .. V_YEAR_COUNT LOOP
    DECLARE
      v_year VARCHAR2(10);
      v_mem NUMBER;
      v_org NUMBER;
      v_rate NUMBER;
      tmp CLOB := V_YEARLY_DATA(i);
    BEGIN
      v_year := REGEXP_SUBSTR(tmp, '"year":"([^"]+)"', 1, 1, NULL, 1);
      v_mem  := TO_NUMBER(REGEXP_SUBSTR(tmp, '"member_paid_amount":([0-9.]+)', 1, 1, NULL, 1));
      v_org  := TO_NUMBER(REGEXP_SUBSTR(tmp, '"org_paid_amount":([0-9.]+)',    1, 1, NULL, 1));
      v_rate := TO_NUMBER(REGEXP_SUBSTR(tmp, '"rate":([0-9.]+)',               1, 1, NULL, 1));

      IF i > 1 THEN
        DBMS_LOB.APPEND(V_YEARLY_MEMBERSHIP_AMOUNT_JSON, ',');
        DBMS_LOB.APPEND(V_YEARLY_ORG_CONTRIBUTION_JSON, ',');
        DBMS_LOB.APPEND(V_RATE_JSON, ',');
      END IF;
      DBMS_LOB.APPEND(V_YEARLY_MEMBERSHIP_AMOUNT_JSON, '{"year":"' || v_year || '","membership_amount":' || NVL(v_mem,0) || '}');
      DBMS_LOB.APPEND(V_YEARLY_ORG_CONTRIBUTION_JSON, '{"year":"' || v_year || '","org_contribution":' || NVL(v_org,0) || '}');
      DBMS_LOB.APPEND(V_RATE_JSON, '{"year":"' || v_year || '","rate":' || NVL(v_rate,0) || '}');
    EXCEPTION WHEN OTHERS THEN
      DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ø®Ø·Ø§ Ø¯Ø± Ø§Ø³ØªØ®Ø±Ø§Ø¬ Ø¬Ø²Ø¦ÛŒØ§Øª Ø³Ø§Ù„Ø§Ù†Ù‡['||i||']:'||SQLERRM);
    END;
  END LOOP;

  DBMS_LOB.APPEND(V_YEARLY_MEMBERSHIP_AMOUNT_JSON, ']');
  DBMS_LOB.APPEND(V_YEARLY_ORG_CONTRIBUTION_JSON, ']');
  DBMS_LOB.APPEND(V_RATE_JSON, ']');

  DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ø·ÙˆÙ„ JSON Ø³Ø§Ù„Ø§Ù†Ù‡:' || DBMS_LOB.GETLENGTH(V_YEARLY_INTEREST_JSON) || ',Ù…Ø¬Ù…ÙˆØ¹ Ø³ÙˆØ¯:' || V_TOTAL_INTEREST_AMOUNT );
EXCEPTION WHEN OTHERS THEN
  DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ø®Ø·Ø§ Ø¯Ø± Ù…Ø­Ø§Ø³Ø¨Ù‡ Ø³ÙˆØ¯:' || SQLERRM);
  V_TOTAL_INTEREST_AMOUNT := 0;
END;
----------------------------------------------------------------------
-- Û¹) ÙˆØ§Ø¬Ø¯ Ø´Ø±Ø§ÛŒØ· Ø¨ÙˆØ¯Ù†
----------------------------------------------------------------------
IF V_TOTAL_YEARS < V_MINIMUM_YEARS THEN
  V_ELIGIBILITY := 0; V_REASON := 'ØªØ¹Ø¯Ø§Ø¯ Ø³Ø§Ù„ Ú©Ù…ØªØ± Ø§Ø² ' || V_MINIMUM_YEARS || ' Ø³Ø§Ù„';
ELSIF V_FULL_PAYMENT_EXISTS = 0 THEN
  V_ELIGIBILITY := 0; V_REASON := 'Ø¹Ø¯Ù… Ù¾Ø±Ø¯Ø§Ø®Øª Ú©Ø§Ù…Ù„ Ø­Ø¯Ø§Ù‚Ù„ ÛŒÚ© Ø³Ø§Ù„';
ELSE
  V_ELIGIBILITY := 1; V_REASON := 'ÙˆØ§Ø¬Ø¯ Ø´Ø±Ø§ÛŒØ· Ø¨Ø±Ø§ÛŒ Ø³ÙˆØ¯ Ùˆ ÙˆØ¶Ø¹ÛŒØª Ø¹Ø¶ÙˆÛŒØª';
END IF;
----------------------------------------------------------------------
-- Û±Û°) Ø¨Ø§Ø²Ú¯Ø´Øª Ù†ØªÛŒØ¬Ù‡
----------------------------------------------------------------------
SELECT SHB.MEMBER_STATUS_SUMMARY(
  eligibility => V_ELIGIBILITY,
  total_amount => V_TOTAL_MEMBER_AMOUNT + V_TOTAL_ORG_AMOUNT + V_TOTAL_INTEREST_AMOUNT,
  member_amount => V_TOTAL_MEMBER_AMOUNT,
  org_amount => V_TOTAL_ORG_AMOUNT,
  total_possible_amount => V_TOTAL_MEMBER_AMOUNT + V_TOTAL_ORG_AMOUNT + V_TOTAL_INTEREST_AMOUNT,
  total_interest_amount => V_TOTAL_INTEREST_AMOUNT,
  reason => V_REASON,
  first_reg_year => V_FIRST_REG_YEAR,
  debug_info => V_DEBUG_INFO,
  yearly_interest => V_YEARLY_INTEREST_JSON,
  yearly_membership_amount => V_YEARLY_MEMBERSHIP_AMOUNT_JSON,
  yearly_org_contribution => V_YEARLY_ORG_CONTRIBUTION_JSON,
  rate => V_RATE_JSON,
  exit_date => V_EXIT_CREATED
) BULK COLLECT INTO rec FROM DUAL;

BEGIN DBMS_LOB.FREETEMPORARY(V_DEBUG_INFO); EXCEPTION WHEN OTHERS THEN NULL; END;
BEGIN DBMS_LOB.FREETEMPORARY(V_YEARLY_INTEREST_JSON); EXCEPTION WHEN OTHERS THEN NULL; END;
BEGIN DBMS_LOB.FREETEMPORARY(V_YEARLY_MEMBERSHIP_AMOUNT_JSON); EXCEPTION WHEN OTHERS THEN NULL; END;
BEGIN DBMS_LOB.FREETEMPORARY(V_YEARLY_ORG_CONTRIBUTION_JSON); EXCEPTION WHEN OTHERS THEN NULL; END;
BEGIN DBMS_LOB.FREETEMPORARY(V_RATE_JSON); EXCEPTION WHEN OTHERS THEN NULL; END;

RETURN rec;

EXCEPTION
  WHEN OTHERS THEN
    V_ERRMSG := SQLERRM;
    BEGIN DBMS_LOB.APPEND(V_DEBUG_INFO, ',Ø®Ø·Ø§ÛŒ ØºÛŒØ±Ù…Ù†ØªØ¸Ø±Ù‡:' || V_ERRMSG); EXCEPTION WHEN OTHERS THEN NULL; END;
    DECLARE v_row SHB.MEMBER_STATUS_SUMMARY;
    BEGIN
      v_row := SHB.MEMBER_STATUS_SUMMARY(
        eligibility => 0, total_amount => 0, member_amount => 0, org_amount => 0,
        total_possible_amount => 0, total_interest_amount => 0,
        reason => 'Ø®Ø·Ø§ÛŒ ØºÛŒØ±Ù…Ù†ØªØ¸Ø±Ù‡: ' || V_ERRMSG, first_reg_year => V_FIRST_REG_YEAR,
        debug_info => V_DEBUG_INFO, yearly_interest => NULL, yearly_membership_amount => NULL,
        yearly_org_contribution => NULL, rate => NULL, exit_date => V_EXIT_CREATED
      );
      rec := SHB.MEMBER_STATUS_SUMMARY_TBL();
      rec.EXTEND(1);
      rec(1) := v_row;
    END;
    BEGIN DBMS_LOB.FREETEMPORARY(V_DEBUG_INFO); EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN DBMS_LOB.FREETEMPORARY(V_YEARLY_INTEREST_JSON); EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN DBMS_LOB.FREETEMPORARY(V_YEARLY_MEMBERSHIP_AMOUNT_JSON); EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN DBMS_LOB.FREETEMPORARY(V_YEARLY_ORG_CONTRIBUTION_JSON); EXCEPTION WHEN OTHERS THEN NULL; END;
    BEGIN DBMS_LOB.FREETEMPORARY(V_RATE_JSON); EXCEPTION WHEN OTHERS THEN NULL; END;
    RETURN rec;
END FNC_GET_MEMBER_INTEREST_TBL;
/
SHOW ERRORS

/* ------------------------------------------------
   9) Quick test
------------------------------------------------- */
SET LONG 100000
SET LONGCHUNKSIZE 100000
PROMPT === Raw Function Output ===
SELECT * FROM TABLE(FNC_GET_MEMBER_INTEREST_TBL(9362));

/* ------------------------------------------------
   10) Reporting Queries
------------------------------------------------- */
VAR gl_person_id NUMBER
EXEC :gl_person_id := 9362;

PROMPT === Query #1 (Exit Summary) ===
SELECT 
    y.id,
    y.person_id,
    y.exit_type,
    y.status,
    y.ok_jazb,
    y.ok_mali,
    TO_CHAR(y.created, 'YYYY/MM/DD','nls_calendar=persian') AS created,
    y.description,
    TO_CHAR(jt.membership_fee, 'FM999,999,999,999') AS membership_fee,
    TO_CHAR(jt.org_contribution_percent, 'FM999.00') AS org_contribution_percent,
    TO_CHAR(jt.org_contribution_amount, 'FM999,999,999,999') AS org_contribution_amount,
    TO_CHAR(jt.member_contribution_percent, 'FM999.00') AS member_contribution_percent,
    TO_CHAR(jt.member_contribution_amount, 'FM999,999,999,999') AS member_contribution_amount,
    TO_CHAR(jt.org_paid_amount, 'FM999,999,999,999') AS org_paid_amount,
    TO_CHAR(jt.member_paid_amount, 'FM999,999,999,999') AS member_paid_amount,    
    TO_CHAR(jt.rate, 'FM999') AS rate,
    TO_CHAR(jt.interest, 'FM999,999,999,999') AS interest,
    TO_CHAR(jt.interest + jt.org_paid_amount, 'FM999,999,999,999') AS profit,
    TO_CHAR(jt.interest + jt.org_paid_amount + jt.member_paid_amount, 'FM999,999,999,999') AS total_amount
FROM shb.tbl_exit_history y,
     (
         SELECT 
             SUM(jt.membership_fee) AS membership_fee,
             ROUND(AVG(jt.org_contribution_percent), 2) AS org_contribution_percent,
             SUM(jt.org_contribution_amount) AS org_contribution_amount,
             ROUND(AVG(jt.member_contribution_percent), 2) AS member_contribution_percent,
             SUM(jt.member_contribution_amount) AS member_contribution_amount,
             SUM(jt.org_paid_amount) AS org_paid_amount,
             SUM(jt.member_paid_amount) AS member_paid_amount,             
             ROUND(AVG(jt.rate)) AS rate,
             SUM(jt.interest) AS interest
         FROM (
             SELECT t.yearly_interest
             FROM TABLE(SHB.FNC_GET_MEMBER_INTEREST_TBL(:gl_person_id)) t
         ) t_outer,
         JSON_TABLE (
             t_outer.yearly_interest,
             '$[*]' COLUMNS (
                 membership_fee               NUMBER        PATH '$.membership_fee',
                 org_contribution_percent     NUMBER        PATH '$.org_contribution_percent',
                 org_contribution_amount      NUMBER        PATH '$.org_contribution_amount',
                 member_contribution_percent  NUMBER        PATH '$.member_contribution_percent',
                 member_contribution_amount   NUMBER        PATH '$.member_contribution_amount',
                 org_paid_amount              NUMBER        PATH '$.org_paid_amount',
                 member_paid_amount           NUMBER        PATH '$.member_paid_amount',                 
                 rate                         NUMBER        PATH '$.rate',
                 interest                     NUMBER        PATH '$.interest'
             )
         ) jt
     ) jt
WHERE y.person_id = TO_NUMBER(:gl_person_id);

PROMPT === Query #2 (Monthly Details & Payments) ===
WITH src AS (
  SELECT t.yearly_interest
  FROM TABLE(SHB.FNC_GET_MEMBER_INTEREST_TBL(:gl_person_id)) t
),
flag AS (
  SELECT CASE 
           WHEN JSON_EXISTS(yearly_interest,'$[*].monthly_details[*].payments[*]?(@.amount > 0)')
           THEN 1 ELSE 0 
         END AS has_pay,
         yearly_interest
  FROM src
),
bounds AS (
  SELECT
    MIN(TO_NUMBER(y) * 100 + m) AS min_key,
    MAX(TO_NUMBER(y))           AS max_year
  FROM flag f
  CROSS JOIN JSON_TABLE(
    f.yearly_interest,
    '$[*]' COLUMNS (
      y VARCHAR2(10) PATH '$.year',
      NESTED PATH '$.monthly_details[*]' COLUMNS (
        m NUMBER PATH '$.month',
        NESTED PATH '$.payments[*]' COLUMNS ( amt NUMBER PATH '$.amount' )
      )
    )
  ) pay
  WHERE f.has_pay = 1
    AND NVL(pay.amt,0) > 0
)
SELECT
  "Ø³Ø§Ù„","Ù…Ø§Ù‡","ØªØ§Ø±ÛŒØ® Ù¾Ø±Ø¯Ø§Ø®Øª","Ø±ÙˆØ²Ù‡Ø§",
  "Ù…Ø¨Ù„Øº Ø¹Ø¶ÙˆÛŒØª","Ø³Ù‡Ù… Ø¹Ø¶Ùˆ","Ø³Ù‡Ù… Ø³Ø§Ø²Ù…Ø§Ù†",
  "Ù…Ø¨Ù„Øº Ù¾Ø±Ø¯Ø§Ø®ØªÛŒ Ø¹Ø¶Ùˆ","Ù…Ø¨Ù„Øº Ù¾Ø±Ø¯Ø§Ø®ØªÛŒ Ø³Ø§Ø²Ù…Ø§Ù†",
  "Ù…Ø¨Ù„Øº Ù‚Ø¨Ù„ÛŒ Ø¹Ø¶Ùˆ","Ù…Ø¨Ù„Øº Ù‚Ø¨Ù„ÛŒ Ø³Ø§Ø²Ù…Ø§Ù†",
  "Ø³ÙˆØ¯ Ø¹Ø¶Ùˆ","Ø³ÙˆØ¯ Ø³Ø§Ø²Ù…Ø§Ù†","Ø³ÙˆØ¯ Ú©Ù„","ÙˆØ¶Ø¹ÛŒØª"
FROM (
  SELECT 
      jm.year AS "Ø³Ø§Ù„",
      CASE jm.month
        WHEN 1 THEN 'Ù�Ø±ÙˆØ±Ø¯ÛŒÙ†' WHEN 2 THEN 'Ø§Ø±Ø¯ÛŒØ¨Ù‡Ø´Øª' WHEN 3 THEN 'Ø®Ø±Ø¯Ø§Ø¯'
        WHEN 4 THEN 'ØªÛŒØ±'     WHEN 5 THEN 'Ù…Ø±Ø¯Ø§Ø¯'     WHEN 6 THEN 'Ø´Ù‡Ø±ÛŒÙˆØ±'
        WHEN 7 THEN 'Ù…Ù‡Ø±'     WHEN 8 THEN 'Ø¢Ø¨Ø§Ù†'      WHEN 9 THEN 'Ø¢Ø°Ø±'
        WHEN 10 THEN 'Ø¯ÛŒ'     WHEN 11 THEN 'Ø¨Ù‡Ù…Ù†'     WHEN 12 THEN 'Ø§Ø³Ù�Ù†Ø¯'
      END AS "Ù…Ø§Ù‡",
      CASE WHEN NVL(jp.payment_type,'none')='none' THEN NULL ELSE jp.payment_date END AS "ØªØ§Ø±ÛŒØ® Ù¾Ø±Ø¯Ø§Ø®Øª",
      TO_CHAR(jm.days, 'FM999') AS "Ø±ÙˆØ²Ù‡Ø§",
      TO_CHAR(jm.membership_fee, 'FM999,999,999,999.00') AS "Ù…Ø¨Ù„Øº Ø¹Ø¶ÙˆÛŒØª",
      TO_CHAR(jm.member_amount,  'FM999,999,999,999.00') AS "Ø³Ù‡Ù… Ø¹Ø¶Ùˆ",
      TO_CHAR(jm.org_amount,     'FM999,999,999,999.00') AS "Ø³Ù‡Ù… Ø³Ø§Ø²Ù…Ø§Ù†",
      CASE WHEN jp.payment_type='MEMBER' THEN TO_CHAR(jp.payment_amount, 'FM999,999,999,999.00') ELSE '0.00' END AS "Ù…Ø¨Ù„Øº Ù¾Ø±Ø¯Ø§Ø®ØªÛŒ Ø¹Ø¶Ùˆ",
      CASE WHEN jp.payment_type='ORG'    THEN TO_CHAR(jp.payment_amount, 'FM999,999,999,999.00') ELSE '0.00' END AS "Ù…Ø¨Ù„Øº Ù¾Ø±Ø¯Ø§Ø®ØªÛŒ Ø³Ø§Ø²Ù…Ø§Ù†",
      TO_CHAR(jm.prev_member_amount, 'FM999,999,999,999.00') AS "Ù…Ø¨Ù„Øº Ù‚Ø¨Ù„ÛŒ Ø¹Ø¶Ùˆ",
      TO_CHAR(jm.prev_org_amount,    'FM999,999,999,999.00') AS "Ù…Ø¨Ù„Øº Ù‚Ø¨Ù„ÛŒ Ø³Ø§Ø²Ù…Ø§Ù†",
      TO_CHAR(
        CASE WHEN jp.payment_type='ORG'
             THEN ROUND(jm.prev_member_amount*jm.rate*jm.days /
                        CASE WHEN MOD(TO_NUMBER(jm.year),33) IN (1,5,9,13,17,22,26,30) THEN 36600 ELSE 36500 END, 2)
             ELSE jm.member_interest END,
        'FM999,999,999,999.00') AS "Ø³ÙˆØ¯ Ø¹Ø¶Ùˆ",
      TO_CHAR(
        CASE WHEN jp.payment_type='MEMBER'
             THEN ROUND(jm.prev_org_amount*jm.rate*jm.days /
                        CASE WHEN MOD(TO_NUMBER(jm.year),33) IN (1,5,9,13,17,22,26,30) THEN 36600 ELSE 36500 END, 2)
             ELSE jm.organ_interest END,
        'FM999,999,999,999.00') AS "Ø³ÙˆØ¯ Ø³Ø§Ø²Ù…Ø§Ù†",
      TO_CHAR(
        (
          CASE WHEN jp.payment_type='ORG'
               THEN ROUND(jm.prev_member_amount*jm.rate*jm.days /
                          CASE WHEN MOD(TO_NUMBER(jm.year),33) IN (1,5,9,13,17,22,26,30) THEN 36600 ELSE 36500 END, 2)
               ELSE jm.member_interest END
        ) +
        (
          CASE WHEN jp.payment_type='MEMBER'
               THEN ROUND(jm.prev_org_amount*jm.rate*jm.days /
                          CASE WHEN MOD(TO_NUMBER(jm.year),33) IN (1,5,9,13,17,22,26,30) THEN 36600 ELSE 36500 END, 2)
               ELSE jm.organ_interest END
        ),
        'FM999,999,999,999.00') AS "Ø³ÙˆØ¯ Ú©Ù„",
      CAST(NULL AS VARCHAR2(200 CHAR)) AS "ÙˆØ¶Ø¹ÛŒØª",
      TO_NUMBER(jm.year) AS y_sort,
      jm.month           AS m_sort,
      CASE WHEN NVL(jp.payment_type,'none')='none' THEN NULL
           ELSE TO_DATE(jp.payment_date,'YYYY/MM/DD','nls_calendar=persian')
      END AS d_sort
  FROM flag f
  CROSS JOIN JSON_TABLE(
    f.yearly_interest,
    '$[*]' COLUMNS (
      year            VARCHAR2(10) PATH '$.year',
      rate            NUMBER       PATH '$.rate',
      membership_fee  NUMBER       PATH '$.membership_fee',
      NESTED PATH '$.monthly_details[*]' COLUMNS (
        month              NUMBER PATH '$.month',
        days               NUMBER PATH '$.days',
        member_amount      NUMBER PATH '$.member_amount',
        org_amount         NUMBER PATH '$.org_amount',
        member_interest    NUMBER PATH '$.member_interest',
        organ_interest     NUMBER PATH '$.organ_interest',
        total_interest     NUMBER PATH '$.total_interest',
        prev_member_amount NUMBER PATH '$.prev_member_amount',
        prev_org_amount    NUMBER PATH '$.prev_org_amount'
      )
    )
  ) jm
  LEFT JOIN JSON_TABLE(
    f.yearly_interest,
    '$[*]' COLUMNS (
      year2 VARCHAR2(10) PATH '$.year',
      NESTED PATH '$.monthly_details[*]' COLUMNS (
        month2 NUMBER PATH '$.month',
        NESTED PATH '$.payments[*]' COLUMNS (
          payment_type   VARCHAR2(10) PATH '$.type',
          payment_date   VARCHAR2(10) PATH '$.date',
          payment_amount NUMBER       PATH '$.amount'
        )
      )
    )
  ) jp
    ON jm.year  = jp.year2
   AND jm.month = jp.month2
  CROSS JOIN bounds b
  WHERE f.has_pay = 1
    AND (TO_NUMBER(jm.year)*100 + jm.month) >= b.min_key
    AND TO_NUMBER(jm.year) <= b.max_year

  UNION ALL

  SELECT 
    CAST(NULL AS VARCHAR2(10)),
    CAST(NULL AS VARCHAR2(20)),
    CAST(NULL AS VARCHAR2(10)),
    CAST(NULL AS VARCHAR2(10)),
    CAST(NULL AS VARCHAR2(30)),
    CAST(NULL AS VARCHAR2(30)),
    CAST(NULL AS VARCHAR2(30)),
    CAST(NULL AS VARCHAR2(30)),
    CAST(NULL AS VARCHAR2(30)),
    CAST(NULL AS VARCHAR2(30)),
    CAST(NULL AS VARCHAR2(30)),
    CAST(NULL AS VARCHAR2(30)),
    CAST(NULL AS VARCHAR2(30)),
    CAST(NULL AS VARCHAR2(30)),
    CAST('Ø§ÛŒÙ† Ø¹Ø¶Ùˆ ØªØ§Ú©Ù†ÙˆÙ† Ù‡ÛŒÚ† Ù¾Ø±Ø¯Ø§Ø®ØªÛŒ Ù†Ø¯Ø§Ø´ØªÙ‡ Ø§Ø³Øª' AS VARCHAR2(200 CHAR)) AS "ÙˆØ¶Ø¹ÛŒØª",
    NULL, NULL, NULL
  FROM flag
  WHERE has_pay = 0
) q
ORDER BY q.y_sort, q.m_sort, q.d_sort;

PROMPT === Demo Done ===
